@using DevExpress.Blazor
@rendermode RenderMode.InteractiveServer
@implements IDisposable

@if (hasNachine)
{
    <div class="card shadow text-center background-card p-3 panel " title="@(MachineParam?.ErrorCodeDescription)" style="@($"{GetStatusBackgroundColor()}; {GetCustomStatusBorderColor()}")" @onclick="@Nav">
        <DxGridLayout>
            <Rows>
                <DxGridLayoutRow Height="2fr" />
                <DxGridLayoutRow Height="1fr" />
                <DxGridLayoutRow Height="1fr" />
                <DxGridLayoutRow Height="6fr" />
            </Rows>
            <Columns>
                <DxGridLayoutColumn Width="12fr" />
            </Columns>
            <Items>
                <DxGridLayoutItem Row="0" Column="0">
                    <Template>
                        <h1 class="card-title">
                            @MachineParam.Name
                        </h1>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Row="1" Column="0">
                    <Template>
                        <div>
                            <h5 class="card-subtitle">
                                @($"{MachineParam.Ip}:{MachineParam.Port}")
                            </h5>
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Row="2" Column="0">
                    <Template>
                        <div>
                            <h5 class="card-subtitle">
                                @($"{MachineParam.MachineStatus.ToString()}/{MachineParam.CustomStatus.ToString()}")
                            </h5>
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Row="3" Column="0">
                    <Template>
                        <div class="w-100 h-100">
                            <img src=@($"images/MyIcon/{GetImageString()}.svg") class="h-100 w-100" />
                        </div>
                    </Template>
                </DxGridLayoutItem>
            </Items>
        </DxGridLayout>
        @*<span class="position-absolute rounded-circle top-0 start-100 error" title="@(MachineParam?.ErrorCodeDescription)"></span>*@
    </div>
}
@code {
    [Parameter]
    public Machine? MachineParam { get; set; }
    private bool hasNachine => MachineParam != null;

    protected override async Task OnInitializedAsync()
    {
        if (hasNachine)
        {
            MachineParam.MachineStatechangedAct += StatusUpdate;
            MachineParam.CustomStatusChangedAct += StatusUpdate;
            MachineParam.ErrorCodeDescriptionChangedAct += StatusUpdate;
        }

    }

    public void Dispose()
    {
        if (hasNachine)
        {
            MachineParam.MachineStatechangedAct -= StatusUpdate;
            MachineParam.CustomStatusChangedAct -= StatusUpdate;
        }

    }

    private async void StatusUpdate(Status status)
    {
        await InvokeAsync(StateHasChanged);
    }

    private async void StatusUpdate()
    {
        await InvokeAsync(StateHasChanged);
    }

    private string GetImageString()
    {
        switch (MachineParam?.ConnectionType)
        {
            case 1:
                return "robot";
            case 2:
                return "machine";
            case 10:
                return "api";
            default:
                return "machine";
        }
    }

    private string GetStatusBackgroundColor()
    {
        return $"background-color:{MachineTypeEnumHelper.GetStatusStyle((int)MachineParam.MachineStatus)?.ColorHTMLString}";
    }

    private string GetCustomStatusBorderColor()
    {
        return MachineParam.hasCustomStatusCondition ? $"box-sizing: border-box; border: 0.5rem solid {MachineTypeEnumHelper.GetStatusStyle((int)MachineParam.CustomStatus)?.ColorHTMLString}" : string.Empty;
    }

    private void Nav()
    {
        if (!string.IsNullOrEmpty(MachineParam.Id.ToString()))
        {
            nav.NavigateTo($"/Machine/{MachineParam.Id}");
        }
    }
}
