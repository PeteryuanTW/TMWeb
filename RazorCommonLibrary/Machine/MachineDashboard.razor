@using DevExpress.Blazor
@rendermode RenderMode.InteractiveServer
@implements IDisposable
@inject IMachineService machineService

@if (hasMachine)
{
    <DxDrawer @bind-IsOpen="@drawerOpen" PanelWidth="20rem" Mode="DrawerMode.Overlap" Position="DrawerPosition.Right" CloseOnTargetContentClick="false" CloseOnEscape="false">
        <HeaderTemplate>
            <DxToolbar ItemRenderStyleMode="@ToolbarRenderStyleMode.Contained" SizeMode="SizeMode.Large" Title="@($"{machine?.Name}-{targetTag?.Name}")">
                <Items>
                    <DxToolbarItem RenderStyle="ButtonRenderStyle.Danger" IconCssClass="oi oi-x" Click="CloseDrawer" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" />
                </Items>
            </DxToolbar>
        </HeaderTemplate>
        <BodyTemplate>
            <DxFormLayout CssClass="w-100">
                @switch (targetTag?.DataType)
                {
                    case 1:
                        <DxFormLayoutItem Caption="@($"{targetTag.Int1}")" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                            <DxCheckBox @bind-Checked="@setVal_bool" CheckType="CheckType.Switch" />
                        </DxFormLayoutItem>
                        break;
                    case 2:
                        <DxFormLayoutItem Caption="@($"{targetTag.Int1}")" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                            <DxSpinEdit @bind-Value="@setVal_ushort" />
                        </DxFormLayoutItem>
                        break;
                    case 3:
                        <DxFormLayoutItem Caption="@($"{targetTag.Int1}")" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                            <DxSpinEdit @bind-Value="@setVal_float"></DxSpinEdit>
                        </DxFormLayoutItem>
                        break;
                    case 4:
                        <DxFormLayoutItem Caption="@($"{targetTag.Int1}")" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                            <DxTextBox @bind-Text="@setVal_string"></DxTextBox>
                        </DxFormLayoutItem>
                        break;
                    default:
                        break;
                }

            </DxFormLayout>
        </BodyTemplate>
        <FooterTemplate>
            <DxToolbar ItemRenderStyleMode="@ToolbarRenderStyleMode.Contained" SizeMode="SizeMode.Large">
                <Items>
                    <DxToolbarItem RenderStyle="ButtonRenderStyle.Info" IconCssClass="oi oi-data-transfer-download" Click="@(async () => await SetTagValue(targetTag))" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" />
                </Items>
            </DxToolbar>
        </FooterTemplate>
        <TargetContent>
            <DxGridLayout ColumnSpacing="3rem" RowSpacing="1rem">
                <Rows>
                    @* <DxGridLayoutRow Height="auto"></DxGridLayoutRow> *@
                    <DxGridLayoutRow Height="auto"></DxGridLayoutRow>
                </Rows>
                <Columns>
                    <DxGridLayoutColumn Width="4fr"></DxGridLayoutColumn>
                    <DxGridLayoutColumn Width="8fr"></DxGridLayoutColumn>
                </Columns>
                <Items>
                    <DxGridLayoutItem Row="0" Column="0">
                        <Template>
                            <DxFormLayout CaptionPosition="CaptionPosition.Vertical" Data="@machine" ReadOnly="true">
                                <DxFormLayoutGroup Caption="Machine Config" CssClass="rounded">
                                    <DxFormLayoutItem Caption="Name">
                                        <DxTextBox @bind-Text="@machine.Name" ReadOnly="true" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Enable">
                                        <DxCheckBox @bind-Checked="@machine.Enabled" CheckType="CheckType.Switch" ReadOnly="true"></DxCheckBox>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Max retry count" ColSpanLg="4">
                                        <DxSpinEdit Value="@machine.MaxRetryCount" ReadOnly="true"></DxSpinEdit>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Retry count" ColSpanLg="4">
                                        <DxSpinEdit Value="@machine.RetryCount" ReadOnly="true"></DxSpinEdit>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Auto Retrying" ColSpanLg="4">
                                        <DxCheckBox Checked="@machine.isAutoRetry" CheckType="CheckType.Switch" ReadOnly="true"></DxCheckBox>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="IP">
                                        <DxTextBox @bind-Text="@machine.Ip" ReadOnly="true" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Port">
                                        <DxSpinEdit @bind-Value="@machine.Port" ReadOnly="true"></DxSpinEdit>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="@($"{localizer["Connection Type"]}")">
                                        <DxComboBox Data="@(connectionType)" @bind-Value="@(machine.ConnectionType)" ReadOnly="true" ValueFieldName="@nameof(ConnectionTypeWrapperClass.Index)" TextFieldName="@nameof(ConnectionTypeWrapperClass.DisplayName)"></DxComboBox>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Tag Category">
                                        <DxComboBox Data="@tagCategories" @bind-Value="@machine.TagCategoryId" ReadOnly="true" ValueFieldName="@nameof(TagCategory.Id)" TextFieldName="@nameof(TagCategory.Name)" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                    </DxFormLayoutItem>
                                </DxFormLayoutGroup>
                                <DxFormLayoutGroup Caption="Runtime data" CssClass="rounded">
                                    <DxFormLayoutItem Caption="Status" Field="@nameof(Machine.StatusStr)" ColSpanLg="4" />
                                    <DxFormLayoutItem Caption="Running" Field="@nameof(Machine.RunFlag)" ColSpanLg="4">
                                        <DxCheckBox Checked="@machine.RunFlag" CheckType="CheckType.Switch" ReadOnly="true" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Retry" ColSpanLg="4">
                                        <DxButton RenderStyle="ButtonRenderStyle.Success" Click="RetryInitMachine" Enabled="@(machine.canManualRetryFlag)" IconCssClass="oi oi-reload"></DxButton>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Error Message" Field="@nameof(Machine.ErrorMsg)" ColSpanLg="12" />
                                </DxFormLayoutGroup>
                            </DxFormLayout>
                        </Template>
                    </DxGridLayoutItem>
                    <DxGridLayoutItem Row="0" Column="1">
                        <Template>
                            <div>
                                <DxFormLayout>
                                    <DxFormLayoutTabPages>
                                        <DxFormLayoutTabPage Caption="Basic Tag" Visible="@(machine.hasTags && machine.machineAvailable)">
                                            <DxFormLayoutItem ColSpanLg="12">
                                                <DxGrid Data="@machine.TagCategory.Tags">
                                                    <Columns>
                                                        <DxGridDataColumn FieldName="@nameof(Tag.Name)" />
                                                        <DxGridDataColumn FieldName="@nameof(Tag.DataType)">
                                                            <CellDisplayTemplate Context="datatypecontext">
                                                                <div>@((DataType)((int)datatypecontext.Value))</div>
                                                            </CellDisplayTemplate>
                                                        </DxGridDataColumn>
                                                        <DxGridDataColumn FieldName="@nameof(Tag.UpdateByTime)" />
                                                        <DxGridDataColumn FieldName="@nameof(Tag.ValueString)" />
                                                        <DxGridDataColumn FieldName="@nameof(Tag.LastChangedTime)" DisplayFormat="G" />
                                                        <DxGridDataColumn FieldName="@nameof(Tag.LastUpdateTime)" DisplayFormat="G" />
                                                        <DxGridDataColumn>
                                                            <CellDisplayTemplate Context="btncontext">
                                                                <div class="d-flex justify-content-center">
                                                                    <DxToolbar>
                                                                        <Items>
                                                                            <DxToolbarItem Enabled="@(!(btncontext.DataItem as Tag).UpdateByTime)" Click="@(()=>UpdateTagClicked(btncontext.DataItem))" IconCssClass="oi oi-loop"></DxToolbarItem>
                                                                            <DxToolbarItem Click="@(()=>SetTagClicked(btncontext.DataItem))" IconCssClass="oi oi-location"></DxToolbarItem>
                                                                        </Items>
                                                                    </DxToolbar>
                                                                </div>
                                                            </CellDisplayTemplate>
                                                        </DxGridDataColumn>
                                                    </Columns>
                                                </DxGrid>
                                            </DxFormLayoutItem>
                                        </DxFormLayoutTabPage>
                                        <DxFormLayoutTabPage Caption="Custom Data" Visible="@(machine.machineAvailable)">
                                            @if (machine.GetType() == typeof(RegalscanRFIDMachine))
                                            {
                                                RegalscanRFIDMachine regalscanRFIDMachine = machine as RegalscanRFIDMachine;
                                                    <DxFormLayoutItem Caption="@($"{localizer["Login token"]}")" CaptionPosition="CaptionPosition.Vertical">
                                                        <DxMemo Text=@(regalscanRFIDMachine.Token) ReadOnly="true"></DxMemo>
                                                    </DxFormLayoutItem>
                                                    <DxFormLayoutItem Caption="@($"{localizer["Expired time"]}")" CaptionPosition="CaptionPosition.Vertical">
                                                        <DxDateEdit Date="@regalscanRFIDMachine.TokenExpiredTime" DisplayFormat="G" ReadOnly="true"></DxDateEdit>
                                                    </DxFormLayoutItem>
                                                    <DxFormLayoutItem Caption="@($"{localizer["Front sensor detected"]}")" BeginRow="true" CaptionPosition="CaptionPosition.Vertical">
                                                        <DxCheckBox Checked=@(regalscanRFIDMachine.FrontSensorOn) CheckType="CheckType.Switch" ReadOnly="true"></DxCheckBox>
                                                    </DxFormLayoutItem>
                                                    <DxFormLayoutItem Caption="@($"{localizer["Beeper"]}")" CaptionPosition="CaptionPosition.Vertical">
                                                        <DxCheckBox Checked=@(regalscanRFIDMachine.BeeperSensorOn) CheckType="CheckType.Switch" ReadOnly="true"></DxCheckBox>
                                                    </DxFormLayoutItem>
                                                    <DxFormLayoutItem Caption="@($"{localizer["Runtime tags info"]}")" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12" BeginRow="true">
                                                        <DxGrid Data="@(regalscanRFIDMachine.RFIDTags)">
                                                            <Columns>
                                                                <DxGridDataColumn FieldName="@nameof(TagRes.EPC_CODE)"></DxGridDataColumn>
                                                            </Columns>
                                                        </DxGrid>
                                                    </DxFormLayoutItem>
                                            }
                                            else
                                            {

                                            }
                                        </DxFormLayoutTabPage>
                                        <DxFormLayoutTabPage Caption="Custom Operation">
                                            @if (machine.GetType() == typeof(TMRobotModbusTCP))
                                            {
                                                var tmrobot = machine as TMRobotModbusTCP;
                                                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical">
                                                    <DxToolbar>
                                                        <Items>
                                                            <DxToolbarItem IconCssClass="oi oi-media-play" RenderStyle="ButtonRenderStyle.Success" Click="@(async ()=>await machine?.ManualRun())" BeginGroup="true" />
                                                            <DxToolbarItem IconCssClass="oi oi-media-pause" RenderStyle="ButtonRenderStyle.Warning" Click="@(async ()=>await tmrobot?.ManualPause())" BeginGroup="true" />
                                                            <DxToolbarItem IconCssClass="oi oi-media-stop" RenderStyle="ButtonRenderStyle.Danger" Click="@(async ()=>await machine?.ManualStop())" BeginGroup="true" />
                                                            <DxToolbarItem IconCssClass="oi oi-plus" RenderStyle="ButtonRenderStyle.Info" Click="@(async ()=>await tmrobot?.ManualSpeedUp())" BeginGroup="true" />
                                                            <DxToolbarItem IconCssClass="oi oi-minus" RenderStyle="ButtonRenderStyle.Info" Click="@(async ()=>await tmrobot?.ManualSlowDown())" BeginGroup="true" />
                                                        </Items>
                                                    </DxToolbar>
                                                </DxFormLayoutItem>
                                                
                                            }
                                            else if (machine.GetType() == typeof(RegalscanRFIDMachine))
                                            {
                                                var regalscanRFID = machine as RegalscanRFIDMachine;
                                                <EditForm Model="regalscanRFID.regalscanRFIDWorkModeModel" OnValidSubmit="@(async () => await regalscanRFID.DeployWorkMode())" Context="EditFormContext">
                                                    <DataAnnotationsValidator />
                                                    <DxFormLayout>
                                                        <DxFormLayoutItem Caption="AUFNR" CaptionPosition="CaptionPosition.Vertical">
                                                            <DxTextBox @bind-Text=@regalscanRFID.regalscanRFIDWorkModeModel.AUFNR></DxTextBox>
                                                        </DxFormLayoutItem>
                                                        <DxFormLayoutItem Caption="AUFNR_QTY" CaptionPosition="CaptionPosition.Vertical">
                                                            <DxSpinEdit @bind-Value=@regalscanRFID.regalscanRFIDWorkModeModel.AUFNR_QTY></DxSpinEdit>
                                                        </DxFormLayoutItem>
                                                        <DxFormLayoutItem Caption="PACKAGE_QTY" CaptionPosition="CaptionPosition.Vertical">
                                                            <DxSpinEdit @bind-Value=@regalscanRFID.regalscanRFIDWorkModeModel.PACKAGE_QTY></DxSpinEdit>
                                                        </DxFormLayoutItem>
                                                        <DxFormLayoutItem Caption="SITE_ID" CaptionPosition="CaptionPosition.Vertical">
                                                            <DxComboBox Data="@(regalscanRFID.Sites)" @bind-Value=@(regalscanRFID.regalscanRFIDWorkModeModel.SITE_ID) ValueFieldName="@nameof(Site.SITE_ID)" TextFieldName="@nameof(Site.SITE_NAME)"></DxComboBox>
                                                        </DxFormLayoutItem>
                                                        <DxFormLayoutItem Caption="PRODUCT_CODE" CaptionPosition="CaptionPosition.Vertical">
                                                            <DxComboBox Data="@(regalscanRFID.Upcs)" @bind-Value=@(regalscanRFID.regalscanRFIDWorkModeModel.PRODUCT_CODE) ValueFieldName="@nameof(UPC.PRODUCT_CODE)" TextFieldName="@nameof(UPC.EPC_CODE)"></DxComboBox>
                                                        </DxFormLayoutItem>
                                                        <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                                                            <DxToolbar>
                                                                <Items>
                                                                    <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                                                                </Items>
                                                            </DxToolbar>
                                                        </DxFormLayoutItem>
                                                    </DxFormLayout>
                                                </EditForm>
                                            }
                                        </DxFormLayoutTabPage>
                                    </DxFormLayoutTabPages>
                                </DxFormLayout>
                                @*<DxTabs @ref="@dxTabs">
                                     <DxTabPage Text="Basic Tag" Visible="@(machine.hasTags && machine.machineAvailable)">

                                        <DxGrid Data="@machine.TagCategory.Tags">
                                            <Columns>
                                                <DxGridDataColumn FieldName="@nameof(Tag.Name)" />
                                                <DxGridDataColumn FieldName="@nameof(Tag.DataType)">
                                                    <CellDisplayTemplate>
                                                        <div>@((DataType)((int)context.Value))</div>
                                                    </CellDisplayTemplate>
                                                </DxGridDataColumn>
                                                <DxGridDataColumn FieldName="@nameof(Tag.UpdateByTime)" />
                                                <DxGridDataColumn FieldName="@nameof(Tag.ValueString)" />
                                                <DxGridDataColumn FieldName="@nameof(Tag.LastChangedTime)" DisplayFormat="G" />
                                                <DxGridDataColumn FieldName="@nameof(Tag.LastUpdateTime)" DisplayFormat="G" />
                                                <DxGridDataColumn>
                                                    <CellDisplayTemplate>
                                                        <div class="d-flex justify-content-center">
                                                            <DxToolbar>
                                                                <Items>
                                                                    <DxToolbarItem Enabled="@(!(context.DataItem as Tag).UpdateByTime)" Click="@(()=>UpdateTagClicked(context.DataItem))" IconCssClass="oi oi-loop"></DxToolbarItem>
                                                                    <DxToolbarItem Click="@(()=>SetTagClicked(context.DataItem))" IconCssClass="oi oi-location"></DxToolbarItem>
                                                                </Items>
                                                            </DxToolbar>
                                                        </div>
                                                    </CellDisplayTemplate>
                                                </DxGridDataColumn>
                                            </Columns>
                                        </DxGrid>

                                    </DxTabPage>
                                    <DxTabPage Text="Custom Data" Visible="@(machine.machineAvailable)">
                                        @if (machine.GetType() == typeof(RegalscanRFIDMachine))
                                        {
                                            RegalscanRFIDMachine regalscanRFIDMachine = machine as RegalscanRFIDMachine;
                                            <DxFormLayout>
                                                <DxFormLayoutItem Caption="@($"{localizer["Login token"]}")" CaptionPosition="CaptionPosition.Vertical">
                                                    <DxMemo Text=@(regalscanRFIDMachine.Token) ReadOnly="true"></DxMemo>
                                                </DxFormLayoutItem>
                                                <DxFormLayoutItem Caption="@($"{localizer["Expired time"]}")" CaptionPosition="CaptionPosition.Vertical">
                                                    <DxDateEdit Date="@regalscanRFIDMachine.TokenExpiredTime" DisplayFormat="G" ReadOnly="true"></DxDateEdit>
                                                </DxFormLayoutItem>
                                                <DxFormLayoutItem Caption="@($"{localizer["Front sensor detected"]}")" BeginRow="true" CaptionPosition="CaptionPosition.Vertical">
                                                    <DxCheckBox Checked=@(regalscanRFIDMachine.FrontSensorOn) CheckType="CheckType.Switch" ReadOnly="true"></DxCheckBox>
                                                </DxFormLayoutItem>
                                                <DxFormLayoutItem Caption="@($"{localizer["Beeper"]}")" CaptionPosition="CaptionPosition.Vertical">
                                                    <DxCheckBox Checked=@(regalscanRFIDMachine.BeeperSensorOn) CheckType="CheckType.Switch" ReadOnly="true"></DxCheckBox>
                                                </DxFormLayoutItem>
                                                <DxFormLayoutItem Caption="@($"{localizer["Runtime tags info"]}")" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12" BeginRow="true">
                                                    <DxGrid Data="@(regalscanRFIDMachine.RFIDTags)">
                                                        <Columns>
                                                            <DxGridDataColumn FieldName="@nameof(TagRes.EPC_CODE)"></DxGridDataColumn>
                                                        </Columns>
                                                    </DxGrid>
                                                </DxFormLayoutItem>
                                            </DxFormLayout>
                                        }
                                        else
                                        {

                                        }
                                    </DxTabPage>
                                    <DxTabPage Text="Custom Operations" Visible="@(machine.machineAvailable)">
                                        @if (machine.GetType() == typeof(TMRobotModbusTCP))
                                        {
                                            var tmrobot = machine as TMRobotModbusTCP;
                                            <DxToolbar>
                                                <Items>
                                                    <DxToolbarItem IconCssClass="oi oi-media-play" Click="@(async ()=>await tmrobot?.ManualPlay())" BeginGroup="true" />
                                                    <DxToolbarItem IconCssClass="oi oi-media-pause" Click="@(async ()=>await tmrobot?.ManualPause())" BeginGroup="true" />
                                                    <DxToolbarItem IconCssClass="oi oi-media-stop" Click="@(async ()=>await tmrobot?.ManualStop())" BeginGroup="true" />
                                                    <DxToolbarItem IconCssClass="oi oi-plus" Click="@(async ()=>await tmrobot?.ManualSpeedUp())" BeginGroup="true" />
                                                    <DxToolbarItem IconCssClass="oi oi-minus" Click="@(async ()=>await tmrobot?.ManualSlowDown())" BeginGroup="true" />
                                                </Items>
                                            </DxToolbar>
                                        }
                                        else if (machine.GetType() == typeof(RegalscanRFIDMachine))
                                        {
                                            var regalscanRFID = machine as RegalscanRFIDMachine;
                                            <EditForm Model="regalscanRFID.regalscanRFIDWorkModeModel" OnValidSubmit="@(async () => await Test())" Context="EditFormContext">
                                                <DataAnnotationsValidator />
                                                <DxFormLayout>
                                                    <DxFormLayoutItem Caption="AUFNR">
                                                        <DxTextBox @bind-Text=@regalscanRFID.regalscanRFIDWorkModeModel.AUFNR></DxTextBox>
                                                    </DxFormLayoutItem>
                                                    <DxFormLayoutItem Caption="AUFNR_QTY">
                                                        <DxSpinEdit @bind-Value=@regalscanRFID.regalscanRFIDWorkModeModel.AUFNR_QTY></DxSpinEdit>
                                                    </DxFormLayoutItem>
                                                    <DxFormLayoutItem Caption="PACKAGE_QTY">
                                                        <DxSpinEdit @bind-Value=@regalscanRFID.regalscanRFIDWorkModeModel.PACKAGE_QTY></DxSpinEdit>
                                                    </DxFormLayoutItem>
                                                    <DxFormLayoutItem Caption="SITE_ID">
                                                        <DxSpinEdit @bind-Value=@regalscanRFID.regalscanRFIDWorkModeModel.SITE_ID></DxSpinEdit>
                                                    </DxFormLayoutItem>
                                                    <DxFormLayoutItem Caption="PRODUCT_CODE">
                                                        <DxTextBox @bind-Text=@regalscanRFID.regalscanRFIDWorkModeModel.PRODUCT_CODE></DxTextBox>
                                                    </DxFormLayoutItem>
                                                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                                                        <DxToolbar>
                                                            <Items>
                                                                <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                                                            </Items>
                                                        </DxToolbar>
                                                    </DxFormLayoutItem>
                                                </DxFormLayout>
                                            </EditForm>
                                        }
                                    </DxTabPage> 
                                </DxTabs>*@

                            </div>
                        </Template>
                    </DxGridLayoutItem>
                </Items>
            </DxGridLayout>
        </TargetContent>
    </DxDrawer>
}
else
{

}

@code {
    DxTabs? dxTabs { get; set; }
    DxTabPage? dxTabPage { get; set; }
    private int tabIndex { get; set; }
    [Parameter]
    public string MachineId { get; set; }
    private Machine? machine;
    private bool hasMachine => machine != null;

    private IEnumerable<ConnectionTypeWrapperClass> connectionType => MachineTypeEnumHelper.GetConnectTypesWrapperClass();
    private IEnumerable<TagCategory> tagCategories = new List<TagCategory>();

    private bool drawerOpen = false;
    private Tag? targetTag;

    private bool setVal_bool = false;
    private ushort setVal_ushort = 0;
    private float setVal_float = 0;
    private string setVal_string = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await InitParam();

    }

    void IDisposable.Dispose()
    {
        if (hasMachine)
        {
            machine.MachineStatechangedAct -= StatusUpdate;
            machine.TagsStatechangedAct -= UIUpdate;
            machine.UIUpdateAct -= UIUpdate;
        }

    }

    private async Task InitParam()
    {
        machine = await machineService.GetMachineByID(new Guid(MachineId));
        if (hasMachine)
        {
            await RetriveTagCategory();
            machine.MachineStatechangedAct += StatusUpdate;
            machine.TagsStatechangedAct += UIUpdate;
            machine.UIUpdateAct += UIUpdate;
        }
    }

    private async Task RetryInitMachine()
    {
        if (hasMachine)
        {
            machine?.InitMachine();
            await machine?.ConnectAsync();
        }
        await InvokeAsync(StateHasChanged);
    }

    private void OpenDrawer()
    {
        drawerOpen = true;
    }

    private void CloseDrawer()
    {
        drawerOpen = false;
    }

    private async void StatusUpdate(Status status)
    {
        await InvokeAsync(StateHasChanged);
    }

    private async void UIUpdate()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task RetriveTagCategory()
    {
        tagCategories = await machineService.GetCategoryByConnectionType(machine.ConnectionType);
    }

    // private async void ConnectTypeChanged(ConnectType ct)
    // {
    //     machine.ConnectionType = (int)ct;
    //     await RetriveTagCategory();
    // }


    private void SelectedNewCategry(Guid? id)
    {
        machine.TagCategoryId = id;
    }

    private async Task UpdateTagClicked(Object tagObj)
    {
        targetTag = tagObj as Tag;
        if (targetTag != null)
        {
            await machine?.UpdateTag(targetTag);
        }

    }

    private void SetTagClicked(Object tagObj)
    {

        targetTag = tagObj as Tag;
        if (targetTag != null)
        {
            switch (targetTag.DataType)
            {
                case 1:
                    setVal_bool = (bool)targetTag.Value;
                    break;
                case 2:
                    setVal_ushort = (ushort)targetTag.Value;
                    break;
                default:
                    break;

            }
            OpenDrawer();
        }

    }

    private async Task SetTagValue(Object tagObj)
    {
        Tag? targetTag = tagObj as Tag;
        if (targetTag != null)
        {
            switch (targetTag.DataType)
            {
                case 1:
                    await machine.SetTag(targetTag, setVal_bool);
                    break;
                case 2:
                    await machine.SetTag(targetTag, setVal_ushort);
                    break;
                case 3:
                    await machine.SetTag(targetTag, setVal_float);
                    break;
                case 4:
                    await machine.SetTag(targetTag, setVal_string);
                    break;
                default:
                    break;

            }
        }
        CloseDrawer();
    }
}
