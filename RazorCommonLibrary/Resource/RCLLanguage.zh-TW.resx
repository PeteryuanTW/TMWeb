<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Login" xml:space="preserve">
    <value>登入</value>
  </data>
  <data name="Logout" xml:space="preserve">
    <value>登出</value>
  </data>
  <data name="User" xml:space="preserve">
    <value>使用者</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>密碼</value>
  </data>
  <data name="Role" xml:space="preserve">
    <value>角色</value>
  </data>
  <data name="Hi" xml:space="preserve">
    <value>嗨</value>
  </data>
  <data name="Init" xml:space="preserve">
    <value>初始化</value>
  </data>
  <data name="TryConnecting" xml:space="preserve">
    <value>嘗試連線中</value>
  </data>
  <data name="Disconnect" xml:space="preserve">
    <value>斷線</value>
  </data>
  <data name="Idle" xml:space="preserve">
    <value>閒置</value>
  </data>
  <data name="Running" xml:space="preserve">
    <value>運作中</value>
  </data>
  <data name="Pause" xml:space="preserve">
    <value>暫停</value>
  </data>
  <data name="Stop" xml:space="preserve">
    <value>停止</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>異常</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>名稱</value>
  </data>
  <data name="IP" xml:space="preserve">
    <value>網際網路協定位址</value>
  </data>
  <data name="Port" xml:space="preserve">
    <value>埠號</value>
  </data>
  <data name="Connection Type" xml:space="preserve">
    <value>通訊協定模式</value>
  </data>
  <data name="Enable" xml:space="preserve">
    <value>啟用</value>
  </data>
  <data name="UpdateDelay" xml:space="preserve">
    <value>更新延遲</value>
  </data>
  <data name="ms" xml:space="preserve">
    <value>毫秒</value>
  </data>
  <data name="Tag" xml:space="preserve">
    <value>訊號</value>
  </data>
  <data name="Tag Category" xml:space="preserve">
    <value>訊號類別</value>
  </data>
  <data name="MaxRetryCount" xml:space="preserve">
    <value>最高嘗試次數</value>
  </data>
  <data name="Custom Status Category" xml:space="preserve">
    <value>客製狀態類別</value>
  </data>
  <data name="Error Code Category" xml:space="preserve">
    <value>錯誤代碼類別</value>
  </data>
  <data name="Tag Count" xml:space="preserve">
    <value>訊號數量</value>
  </data>
  <data name="Data Type" xml:space="preserve">
    <value>資料型別</value>
  </data>
  <data name="Update By Time" xml:space="preserve">
    <value>即時更新</value>
  </data>
  <data name="Special Type" xml:space="preserve">
    <value>特殊類別</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>狀態</value>
  </data>
  <data name="Condition String" xml:space="preserve">
    <value>條件字串</value>
  </data>
  <data name="Input/Output" xml:space="preserve">
    <value>輸入/輸出</value>
  </data>
  <data name="Station No" xml:space="preserve">
    <value>站號</value>
  </data>
  <data name="Start Index" xml:space="preserve">
    <value>起始位置</value>
  </data>
  <data name="Offset" xml:space="preserve">
    <value>偏移</value>
  </data>
  <data name="Not Defined" xml:space="preserve">
    <value>未定義</value>
  </data>
</root>