@rendermode InteractiveServer

@if (componentAssigned)
{
    <div class="@($"icon rounded d-flex position-absolute")" data-toggle="tooltip" data-placement="top" title="@($"{name}")" style="@($"{shapeCss} {StatusColorCss}")">
    </div>
}




@code {
    [Parameter]
    public MapComponent? MapComponentConfig { get; set; }

    private bool componentAssigned => MapComponentConfig != null;

    private string shapeCss => componentAssigned ? $"left:{MapComponentConfig.PositionX}%; top:{MapComponentConfig.PositionY}%; width:{MapComponentConfig.Width}%; height:{MapComponentConfig.Height}%;" : string.Empty;
    private string name = string.Empty;
    private Status status = Status.Init;
    private string StatusColorCss => GetPanelStatusStyle();


    protected override async Task OnInitializedAsync()
    {
        await RetriveName();
        await base.OnInitializedAsync();
    }

    private async Task RetriveName()
    {
        if (componentAssigned)
        {
            switch (MapComponentConfig.Type)
            {
                case 0:
                    Station? station = await shopfloorService.GetStationsById(MapComponentConfig.TargetId);
                    if (station != null)
                    {
                        name = station.Name;
                        station.StatusUpdateAct += StatusUpdate;
                        status = station.StationStatus;
                    }
                    break;
                case 1:
                    Machine? machine = await machineService.GetMachineByID(MapComponentConfig.TargetId);
                    if (machine != null)
                    {
                        name = machine.Name;
                        machine.MachineStatechangedAct += StatusUpdate;
                        status = machine.MachineStatus;
                    }
                    break;
                default:
                    break;
            }
        }
    }

    protected string GetPanelStatusStyle()
    {
        var style = MachineTypeEnumHelper.GetStatusStyle((int)status);
        //var aa = style is null;
        //var a = style is not null ? $"background-color: {style.ColorHTMLString}" : string.Empty;
        return style is not null ? $"background-color: {style.ColorHTMLString}" : string.Empty;
    }

    private void StatusUpdate(Status status)
    {
        this.status = status;
        InvokeAsync(StateHasChanged);
    }

    private string IconCss()
    {
        if (componentAssigned)
        {
            switch (MapComponentConfig?.Type)
            {
                case 0:
                    return "station";
                case 1:
                    return "machine";
                default:
                    return "";
            }
        }
        else
        {
            return string.Empty;
        }
    }
}
