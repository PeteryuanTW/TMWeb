@inherits StationComponent

@{
    base.BuildRenderTree(__builder);
}
<DxPopup HeaderText="@stationSingleWorkorderSingleSerial.Name" @bind-Visible="@showOperation" CloseOnOutsideClick="false" ShowFooter="true">
    <BodyContentTemplate>
        <div>
            <DxTabs @bind-ActiveTabIndex="@operationTabIndex">
                <DxTabPage Text="Station in">
                    <div class="p-3">
                        <DxFormLayout>
                            <DxFormLayoutItem Caption="SerialNo" Context="serialnocontext">
                                <DxTextBox @bind-Text="@serialNo" ReadOnly="@(stationSingleWorkorderSingleSerial.HasItem && stationSingleWorkorderSingleSerial.HasTask)"></DxTextBox>
                            </DxFormLayoutItem>
                        </DxFormLayout>
                    </div>
                </DxTabPage>
                <DxTabPage Text="Station out" Visible="@stationSingleWorkorderSingleSerial.HasTask">
                    <div class="p-3">
                        <DxFormLayout>
                            <DxFormLayoutItem Caption="SerialNo" Context="serialnocontext">
                                <DxTextBox @bind-Text="@serialNo" ReadOnly="true"></DxTextBox>
                            </DxFormLayoutItem>
                        </DxFormLayout>
                    </div>
                </DxTabPage>
                <DxTabPage Text="Item record" Visible="@(stationSingleWorkorderSingleSerial.HasItem && stationSingleWorkorderSingleSerial.HasWorkorder && stationSingleWorkorderSingleSerial.Workerder.HasItemRecord)">
                    <div class="p-3">
                        <DxFormLayout>
                            @foreach (ItemRecordDetail itemRecordDetail in itemRecordDetails)
                            {
                                <DxFormLayoutItem Caption="@itemRecordDetail.RecordContent?.RecordName" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="6" Context="itemrecordcontext">
                                    <DxTextBox @bind-Text="@itemRecordDetail.Value" />
                                </DxFormLayoutItem>
                            }
                        </DxFormLayout>
                    </div>
                </DxTabPage>
            </DxTabs>
        </div>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxToolbar>
            <Items>
                @if (operationTabIndex == 0)
                {
                    <DxToolbarItem Text="Station in" Click="StationInOperation" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" Alignment="ToolbarItemAlignment.Right"></DxToolbarItem>
                }
                else if (operationTabIndex == 1)
                {
                    <DxToolbarItem Text="OK" Click="@(()=>StationOutOperation(true))" RenderStyle="ButtonRenderStyle.Success" BeginGroup="true" Alignment="ToolbarItemAlignment.Right"></DxToolbarItem>
                    <DxToolbarItem Text="NG" Click="@(()=>StationOutOperation(false))" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right"></DxToolbarItem>
                }
                else if (operationTabIndex == 2)
                {
                    <DxToolbarItem Text="Record" Click="ItemRecord" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" Alignment="ToolbarItemAlignment.Right"></DxToolbarItem>
                }
            </Items>
        </DxToolbar>
    </FooterContentTemplate>
</DxPopup>
@if (stationSingleWorkorderSingleSerial != null)
{
    <div class="card shadow panel p-3 @GetPanelStatusStyle()">
        <DxGridLayout>
            <Rows>
                <DxGridLayoutRow Areas="name status" Height="auto" />
                <DxGridLayoutRow Areas="info info" Height="auto" />
                <DxGridLayoutRow Areas="actionbtn actionbtn" Height="auto" />
            </Rows>
            <Columns>
                <DxGridLayoutColumn Width="70%" />
                <DxGridLayoutColumn Width="30%" />
            </Columns>
            <Items>
                <DxGridLayoutItem Area="name">
                    <Template>
                        <div class="containeralignmid">
                            <DxButton Text="@stationSingleWorkorderSingleSerial.Name" RenderStyle="ButtonRenderStyle.Secondary" RenderStyleMode="ButtonRenderStyleMode.Outline"></DxButton>
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="status">
                    <Template>
                        <div class="containeralignmid">
                            <DxButton Text="@($"{stationSingleWorkorderSingleSerial.Status.ToString()}")" RenderStyle="@GetStatusStyle()"></DxButton>
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="info">
                    <Template>
                        <div class="p-3">
                            <DxFormLayout>
                                <DxFormLayoutItem Caption="Process" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                                    <DxTextBox Text="@stationSingleWorkorderSingleSerial.Process?.Name" ReadOnly="true"></DxTextBox>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Workorder" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                                    <DxTextBox Text="@stationSingleWorkorderSingleSerial.Workerder?.WorkorderNo" ReadOnly="true"></DxTextBox>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Ok" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="6">
                                    <DxSpinEdit Value="@(GetOkAmount())" ReadOnly="true"></DxSpinEdit>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Ng" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="6">
                                    <DxSpinEdit Value="@(GetNgAmount())" ReadOnly="true"></DxSpinEdit>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="SerialNo" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                                    <DxTextBox Text="@stationSingleWorkorderSingleSerial.TaskDetail?.SerialNo" ReadOnly="true"></DxTextBox>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Start Time" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                                    <DxDateEdit Date="@stationSingleWorkorderSingleSerial.TaskDetail?.StartTime" TimeSectionVisible="true" ReadOnly="true"></DxDateEdit>
                                </DxFormLayoutItem>
                                @if (stationSingleWorkorderSingleSerial.hasCustomUIInfo)
                                {
                                    @foreach (var record in stationSingleWorkorderSingleSerial.StationUirecords)
                                    {
                                        <DxFormLayoutItem Caption="@(record.ItemRecord.RecordName)" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                                            <DxTextBox Text="@(GetItemRecordDetailValue(record.ItemRecordId))" ReadOnly="true"></DxTextBox>
                                        </DxFormLayoutItem>
                                    }
                                }

                            </DxFormLayout>
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="actionbtn">
                    <Template>
                        <div class="containeralignmid">
                            @* <DxButton Enabled="@(canrun && stationSingleWorkorderSingleSerial.HasWorkorder)" IconCssClass="oi oi-media-play" RenderStyle="ButtonRenderStyle.Success" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton> *@
                            <DxButton Enabled="@canoperate" Click="@ShowOperationPopup" IconCssClass="oi oi-clipboard" RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton>
                            @* <DxButton Enabled="@canpause" IconCssClass="oi oi-media-pause" RenderStyle="ButtonRenderStyle.Warning" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton> *@
                            @* <DxButton Enabled="@canstop" IconCssClass="oi oi-media-stop" RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton> *@
                            <DxButton Enabled="@canretry" IconCssClass="oi oi-reload" RenderStyle="ButtonRenderStyle.Secondary" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton>
                            <DxButton Enabled="@iserror" IconCssClass="oi oi-ellipses" RenderStyle="ButtonRenderStyle.Secondary" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton>
                        </div>
                    </Template>
                </DxGridLayoutItem>
            </Items>
        </DxGridLayout>
    </div>
}







@code {
    private StationSingleWorkorderSingleSerial? stationSingleWorkorderSingleSerial => StationParam as StationSingleWorkorderSingleSerial;

    private int operationTabIndex;
    private string serialNo = string.Empty;

    private IEnumerable<ItemRecordDetail> itemRecordDetails;

    protected override void OnOperationPopupShow()
    {
        if (stationSingleWorkorderSingleSerial.HasTask)
        {
            serialNo = stationSingleWorkorderSingleSerial.TaskDetail.SerialNo;
            itemRecordDetails = shopfloorService.RetriveOrGenerateItemRecordDetail(stationSingleWorkorderSingleSerial.Workerder, stationSingleWorkorderSingleSerial.ItemDetail);
        }
        else
        {
            serialNo = string.Empty;
        }
        base.OnOperationPopupShow();
    }

    private async Task StationInOperation()
    {
        if (!stationSingleWorkorderSingleSerial.HasTask)
        {
            await shopfloorService.StationInByNameAndSerialNo(stationSingleWorkorderSingleSerial.Name, serialNo);
        }
        CloseOperationPopup();
    }
    private async Task StationOutOperation(bool pass)
    {
        if (stationSingleWorkorderSingleSerial.HasTask)
        {
            if (string.IsNullOrEmpty(serialNo))
            {
                await shopfloorService.StationOutByFIFO(stationSingleWorkorderSingleSerial.Name, pass);
            }
            else
            {
                await shopfloorService.StationOutBySerialNo(stationSingleWorkorderSingleSerial.Name, serialNo, pass);
            }
        }
        CloseOperationPopup();
    }

    private async Task ItemRecord()
    {
        await shopfloorService.UpsertItemRecord(itemRecordDetails.ToList());
        CloseOperationPopup();
    }

    private int GetOkAmount()
    {
        if (!stationSingleWorkorderSingleSerial.HasWorkorder)
        {
            return 0;
        }
        else
        {
            return GetTotalOk(stationSingleWorkorderSingleSerial.Workerder.Id);
        }
    }
    private int GetNgAmount()
    {
        if (!stationSingleWorkorderSingleSerial.HasWorkorder)
        {
            return 0;
        }
        else
        {
            return GetTotalNg(stationSingleWorkorderSingleSerial.Workerder.Id);
        }
    }

    private string GetItemRecordDetailValue(Guid? recordID)
    {
        if (!stationSingleWorkorderSingleSerial.HasWorkorder || !stationSingleWorkorderSingleSerial.HasItem || !stationSingleWorkorderSingleSerial.HasTask)
        {
            return string.Empty;
        }
        if (recordID == null)
        {
            return string.Empty;
        }
        else
        {
            var res = shopfloorService.GetItemRecordDetail(stationSingleWorkorderSingleSerial.ItemDetail.Id, recordID);
            if (res == null)
            {
                return string.Empty;
            }
            else
            {
                return res.Value;
            }
        }
    }
}
