@rendermode InteractiveServer
@inject TMWebShopfloorService shopfloorService

<DxPopup HeaderText="Error Message" @bind-Visible="@showErrorMsg" CloseOnOutsideClick="false" />

@code {
    [Parameter]
    public Station StationParam { get; set; }
    protected bool hasStation => StationParam != null;

    protected IEnumerable<Workorder> workOrderCandidates;

    protected bool canedit => hasStation ? StationParam.Status == Status.Init : false;
    protected bool canrun => hasStation ? StationParam.Status == Status.Init : false;
    protected bool canoperate => hasStation ? StationParam.Status == Status.Running : false;
    protected bool canpause => hasStation ? StationParam.Status == Status.Running : false;
    protected bool canstop => hasStation ? StationParam.Status == Status.Running : false;
    protected bool canretry => hasStation ? (StationParam.Status == Status.Stop || StationParam.Status == Status.Error) : false;
    protected bool iserror => hasStation ? StationParam.Status == Status.Error : false;

    public bool showErrorMsg = false;
    public bool showOperation = false;

    protected ButtonRenderStyle GetStatusStyle()
    {
        switch (StationParam?.Status)
        {
            case Status.Init:
                return ButtonRenderStyle.Secondary;
            case Status.Running:
                return ButtonRenderStyle.Success;
            // case Status.Pause:
            //     return ButtonRenderStyle.Warning;
            case Status.Stop:
            case Status.Error:
                return ButtonRenderStyle.Danger;
            default:
                return ButtonRenderStyle.None;
        }
    }
    protected string GetPanelStatusStyle()
    {
        switch (StationParam?.Status)
        {
            case Status.Running:
                return "running";
            // case Status.Pause:
            //     return "pause";
            case Status.Stop:
            case Status.Error:
                return "stop";
            default:
                return "uninit";
        }
    }

    protected virtual void OnOperationPopupShow()
    {

    }

    protected override async Task OnInitializedAsync()
    {
        shopfloorService.StationChangedAct += UIUpdateFromStation;
        StationParam.StatusUpdateAct += StatusUpdateFromStation;
        StationParam.UIUpdateAct += UIUpdateFromStation;
    }

    private async void UIUpdateFromStation()
    {
        await InvokeAsync(StateHasChanged);

    }

    private async void StatusUpdateFromStation(Status s)
    {
        await InvokeAsync(StateHasChanged);

    }

    private async void UIUpdateFromStation(Station s)
    {
        if (s.Id == StationParam.Id)
        {
            await InvokeAsync(StateHasChanged);
        }

    }

    protected void ShowErrorPopup()
    {
        showErrorMsg = true;
        InvokeAsync(StateHasChanged);
    }

    protected void ShowOperationPopup()
    {
        showOperation = true;
        OnOperationPopupShow();
    }
    protected void CloseOperationPopup()
    {
        showOperation = false;
    }

    protected int GetTotalOk(Guid workorderID)
    {
        if (!hasStation)
        {
            return 0;
        }
        else
        {
            return shopfloorService.GetWorkorderOkInStation(workorderID, StationParam.Id);
        }
    }

    protected int GetTotalNg(Guid workorderID)
    {
        if (!hasStation)
        {
            return 0;
        }
        else
        {
            return shopfloorService.GetWorkorderNgInStation(workorderID, StationParam.Id);
        }
    }
}
