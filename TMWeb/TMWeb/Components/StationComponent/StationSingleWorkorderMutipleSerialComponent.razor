@inherits StationComponent
@inject TMWebShopfloorService shopfloorService

@{
    base.BuildRenderTree(__builder);
}
<DxPopup HeaderText="@stationSingleWorkorderMutipleSerial.Name" @bind-Visible="@showOperation" CloseOnOutsideClick="false" ShowFooter="true">
    <BodyContentTemplate>
        <div class="w-100">
            <DxTabs @bind-ActiveTabIndex="@operationTabIndex">
                <DxTabPage Text="Station in">
                    <div class="p-3">
                        <DxFormLayout>
                            <DxFormLayoutItem Caption="SerialNo" Context="serialnocontext">
                                <DxTextBox @bind-Text="@stationInSerialNo"></DxTextBox>
                            </DxFormLayoutItem>
                        </DxFormLayout>
                    </div>
                </DxTabPage>
                <DxTabPage Text="Station out" Visible="@stationSingleWorkorderMutipleSerial.HasTask">
                    <div class="p-3">
                        <DxTagBox Data="@stationSingleWorkorderMutipleSerial.TaskDetailsInStation"
                                  EditFormat="{0}"
                                  @bind-Values="@selectedStationOutTaskDetails">
                            <Columns>
                                <DxListEditorColumn FieldName="@nameof(TaskDetail.SerialNo)" />
                            </Columns>
                        </DxTagBox>
                    </div>
                </DxTabPage>
                <DxTabPage Text="Item record" Visible="@(stationSingleWorkorderMutipleSerial.HasItem && stationSingleWorkorderMutipleSerial.HasWorkorder && stationSingleWorkorderMutipleSerial.Workerder.HasItemRecord)">
                    <div class="p-3">
                        <DxFormLayout>
                            <DxFormLayoutItem Caption="SerialNo" Context="itemrecordcontext" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                                <DxComboBox Data="@stationSingleWorkorderMutipleSerial.ItemDetails" Value="@recordItemDetail" ValueChanged="@((ItemDetail i)=>ItemRecordSelected(i))" EditFormat="{0}">
                                    <Columns>
                                        <DxListEditorColumn FieldName="@nameof(TaskDetail.SerialNo)" />
                                    </Columns>
                                </DxComboBox>
                            </DxFormLayoutItem>

                            @foreach (ItemRecordDetail itemRecordDetail in itemRecordDetails)
                            {
                                <DxFormLayoutItem Caption="@itemRecordDetail.RecordContent?.RecordName" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="6" Context="itemrecordcontext">
                                    <DxTextBox @bind-Text="@itemRecordDetail.Value" />
                                </DxFormLayoutItem>
                            }
                        </DxFormLayout>
                    </div>
                </DxTabPage>
            </DxTabs>
        </div>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxToolbar>
            <Items>
                @if (operationTabIndex == 0)
                {
                    <DxToolbarItem Text="Station in" Click="StationInOperation" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" Alignment="ToolbarItemAlignment.Right"></DxToolbarItem>
                }
                else if (operationTabIndex == 1)
                {
                    <DxToolbarItem Text="OK" Click="@(()=>StationOutOperation(true))" RenderStyle="ButtonRenderStyle.Success" BeginGroup="true" Alignment="ToolbarItemAlignment.Right"></DxToolbarItem>
                    <DxToolbarItem Text="NG" Click="@(()=>StationOutOperation(false))" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right"></DxToolbarItem>
                }
                else if (operationTabIndex == 2)
                {
                    <DxToolbarItem Text="Record" Click="ItemRecord" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" Alignment="ToolbarItemAlignment.Right"></DxToolbarItem>
                }
            </Items>
        </DxToolbar>
    </FooterContentTemplate>
</DxPopup>

@if (stationSingleWorkorderMutipleSerial != null)
{
    <div class="card shadow panel p-3 @GetPanelStatusStyle()">
        <DxGridLayout CssClass="h-100">
            <Rows>
                <DxGridLayoutRow Areas="name status" Height="10%" />
                <DxGridLayoutRow Areas="info info" Height="80%" />
                <DxGridLayoutRow Areas="actionbtn actionbtn" Height="10%" />
            </Rows>
            <Columns>
                <DxGridLayoutColumn Width="70%" />
                <DxGridLayoutColumn Width="30%" />
            </Columns>
            <Items>
                <DxGridLayoutItem Area="name">
                    <Template>
                        <div class="containeralignmid">
                            <DxButton Text="@stationSingleWorkorderMutipleSerial.Name" RenderStyle="ButtonRenderStyle.Secondary" RenderStyleMode="ButtonRenderStyleMode.Outline"></DxButton>
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="status">
                    <Template>
                        <div class="containeralignmid">
                            <DxButton Text="@($"{stationSingleWorkorderMutipleSerial.StationStatus.ToString()}")" RenderStyle="@GetStatusStyle()"></DxButton>
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="info">
                    <Template>
                        <div class="p-3">
                            <DxFormLayout>
                                <DxFormLayoutItem Caption="Process" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                                    <DxTextBox Text="@stationSingleWorkorderMutipleSerial.Process?.Name" ReadOnly="true"></DxTextBox>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Workorder" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                                    <DxTextBox Text="@stationSingleWorkorderMutipleSerial.Workerder?.WorkorderNo" ReadOnly="true"></DxTextBox>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                                    <DxGrid Data="@stationSingleWorkorderMutipleSerial.TaskDetailsInStation">
                                        <Columns>
                                            <DxGridDataColumn FieldName="@nameof(TaskDetail.SerialNo)"></DxGridDataColumn>
                                            <DxGridDataColumn FieldName="@nameof(TaskDetail.StartTime)" DisplayFormat="G"></DxGridDataColumn>
                                        </Columns>
                                    </DxGrid>
                                </DxFormLayoutItem>
                            </DxFormLayout>
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Area="actionbtn">
                    <Template>
                        <div class="containeralignmid">
                            @* <DxButton Enabled="@(canrun && stationSingleWorkorderSingleSerial.HasWorkorder)" IconCssClass="oi oi-media-play" RenderStyle="ButtonRenderStyle.Success" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton> *@
                            <DxButton Enabled="@canoperate" Click="@ShowOperationPopup" IconCssClass="oi oi-clipboard" RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton>
                            @* <DxButton Enabled="@canpause" IconCssClass="oi oi-media-pause" RenderStyle="ButtonRenderStyle.Warning" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton> *@
                            @* <DxButton Enabled="@canstop" IconCssClass="oi oi-media-stop" RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton> *@
                            <DxButton Enabled="@canretry" IconCssClass="oi oi-reload" RenderStyle="ButtonRenderStyle.Secondary" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton>
                            <DxButton Enabled="@iserror" Click="@(()=>StationOutOperation(false))" IconCssClass="oi oi-ellipses" RenderStyle="ButtonRenderStyle.Secondary" RenderStyleMode="ButtonRenderStyleMode.Outline" SizeMode="SizeMode.Large"></DxButton>
                        </div>
                    </Template>
                </DxGridLayoutItem>
            </Items>
        </DxGridLayout>
    </div>
}

@code {
    private StationSingleWorkorderMutipleSerial? stationSingleWorkorderMutipleSerial => StationParam as StationSingleWorkorderMutipleSerial;

    private int operationTabIndex;

    private ItemDetail recordItemDetail;
    private bool recordItemDetailSelected => recordItemDetail != null;
    private IEnumerable<ItemRecordDetail> itemRecordDetails;

    private string stationInSerialNo = string.Empty;
    private IEnumerable<TaskDetail>? selectedStationOutTaskDetails;
    private bool stationOutTaskDetailsSelected => selectedStationOutTaskDetails != null && selectedStationOutTaskDetails.Count() > 0;



    protected override void OnOperationPopupShow()
    {
        selectedStationOutTaskDetails = null;
        recordItemDetail = null;
        itemRecordDetails = new List<ItemRecordDetail> { };
        base.OnOperationPopupShow();
    }

    private void ItemRecordSelected(ItemDetail itemDetail)
    {
        recordItemDetail = itemDetail;
        itemRecordDetails = shopfloorService.RetriveOrGenerateItemRecordDetail(stationSingleWorkorderMutipleSerial.Workerder, itemDetail);
    }

    private async Task StationInOperation()
    {
        await shopfloorService.StationInByNameAndSerialNo(stationSingleWorkorderMutipleSerial.Name, stationInSerialNo);
        CloseOperationPopup();
    }
    private async Task StationOutOperation(bool pass)
    {
        if (stationSingleWorkorderMutipleSerial.HasTask)
        {
            if (stationOutTaskDetailsSelected)
            {
                foreach (TaskDetail taskDetail in selectedStationOutTaskDetails)
                {
                    await shopfloorService.StationOutBySerialNo(stationSingleWorkorderMutipleSerial.Name, taskDetail.SerialNo, pass);
                }
            }
            else
            {
                await shopfloorService.StationOutByFIFO(stationSingleWorkorderMutipleSerial.Name, pass);
            }
            //await shopfloorService.StationOutBySerialNo(stationSingleWorkorderMutipleSerial.Name, serialNo, pass);
        }
        CloseOperationPopup();
    }

    private async Task ItemRecord()
    {
        await shopfloorService.UpsertItemRecord(itemRecordDetails.ToList());
    }
}
