@page "/"
@rendermode InteractiveServer
@implements IDisposable

<DxGridLayout ColumnSpacing="3rem" RowSpacing="3rem">
    <Rows>
        <DxGridLayoutRow></DxGridLayoutRow>
    </Rows>
    <Columns>
        <DxGridLayoutColumn Width="3fr"></DxGridLayoutColumn>
        <DxGridLayoutColumn Width="6fr"></DxGridLayoutColumn>
    </Columns>
    <Items>
        <DxGridLayoutItem Row="0" Column="0">
            <Template>
                <DxFormLayout>
                    <DxFormLayoutItem ColSpanLg="12">
                        @* <DxCarousel LoopNavigationEnabled="true"
                                    SlideShowEnabled="true"
                                    NavButtonsDisplayMode="CarouselControlsDisplayMode.VisibleOnHover">
                            <Items>
                                <DxCarouselItem>
                                    <div>
                                        <MachinesSummaryBarGauge Machines="@machines"></MachinesSummaryBarGauge>
                                    </div>
                                </DxCarouselItem>
                                <DxCarouselItem>
                                    <div>
                                        <MachinesSummaryBarGauge Machines="@machines"></MachinesSummaryBarGauge>
                                    </div>
                                </DxCarouselItem>
                            </Items>
                        </DxCarousel> *@
                        <MachinesSummaryBarGauge Machines="@machines"></MachinesSummaryBarGauge>
                    </DxFormLayoutItem>
                </DxFormLayout>
            </Template>
        </DxGridLayoutItem>
        <DxGridLayoutItem Row="0" Column="1">
            <Template>
                <WorkorderWIPComponent></WorkorderWIPComponent>
            </Template>
        </DxGridLayoutItem>
    </Items>
</DxGridLayout>




@code {
    private List<Machine> machines;
    private int activeIndex = 0;
    private int totalIndex = 1;

    private int autoPlaySec = 10;
    private int autoPlayDelay => autoPlaySec * 1000;

    private bool autoPlay = true;
    private bool running = true;

    Thread t;

    protected override async Task OnInitializedAsync()
    {
        //var a = await shopfloorService.Test();
        machines = machineService.Machines;

        await base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            t = new Thread(AutoPlay);
            t.Start();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private void SwitchAutoPlay(bool b)
    {
        autoPlay = b;
        if (autoPlay)
        {
            running = true;
            t = new Thread(AutoPlay);
            t.Start();
        }
        else
        {
            running = false;
        }
    }

    private async void AutoPlay()
    {
        while (running)
        {
            if (activeIndex < totalIndex)
            {
                activeIndex++;
            }
            else
            {
                activeIndex = 0;
            }
            await InvokeAsync(StateHasChanged);
            await Task.Delay(autoPlayDelay);
        }
    }

    public void Dispose()
    {
    }
}