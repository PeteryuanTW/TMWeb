@page "/Diagram"
@using Blazor.Diagrams.Options
@using Blazor.Diagrams.Components
@using Blazor.Diagrams
@using Blazor.Diagrams.Core
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.Extensions
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Options
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@rendermode InteractiveServer

<style>
    .diagram-container {
        width: 100%;
        height: 400px;
        border: 1px solid black; /* Just visual */
    }
</style>

<div class="diagram-container">
    <CascadingValue Value="Diagram" IsFixed="true">
        <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
</div>

@code {
    private BlazorDiagram Diagram { get; set; } = null!;

    protected override void OnInitialized()
    {
        var options = new BlazorDiagramOptions
            {
                AllowMultiSelection = true,
                Zoom =
            {
                Enabled = false,
            },
                Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new SmoothPathGenerator()
            },
            };

        Diagram = new BlazorDiagram(options);

        var firstNode = Diagram.Nodes.Add(new NodeModel(position: new Blazor.Diagrams.Core.Geometry.Point(50, 50))
            {
                Title = "Node 1"
                
                
            });
        var secondNode = Diagram.Nodes.Add(new NodeModel(position: new Blazor.Diagrams.Core.Geometry.Point(200, 100))
            {
                Title = "Node 2"
            });
        var leftPort = secondNode.AddPort(PortAlignment.Left);
        var rightPort = secondNode.AddPort(PortAlignment.Right);
    }
}
