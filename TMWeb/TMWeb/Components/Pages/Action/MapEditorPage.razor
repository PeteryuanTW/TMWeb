@page "/MapEditorPage/{Id}"
@rendermode InteractiveServer
@inject IStringLocalizer<Language> localizer
@inject NavigationManager nav
@inject TMWebShopfloorService shopfloorService

@if (hasImage)
{
    <DxGridLayout RowSpacing="1rem" ColumnSpacing="1rem">
        <Rows>
            <DxGridLayoutRow Height="1fr"></DxGridLayoutRow>
            <DxGridLayoutRow Height="11fr"></DxGridLayoutRow>
        </Rows>
        <Columns>
            <DxGridLayoutColumn Width="10fr"></DxGridLayoutColumn>
            <DxGridLayoutColumn Width="2fr"></DxGridLayoutColumn>
        </Columns>
        <Items>
            <DxGridLayoutItem Row="0" Column="0" RowSpan="2">
                <Template>
                    <div class="card h-100 position-relative">
                        <img class=" h-100 w-100" src="@($"data:{mapConfig.Image.DataType};base64,{Convert.ToBase64String(mapConfig.Image.DataByte ?? Array.Empty<byte>())}") " />
                        @foreach (MapComponent mapComponent in mapConfig.MapComponents)
                        {
                            <MapEditComponent MapComponentConfig="@mapComponent" />
                        }
                    </div>
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Row="0" Column="1">
                <Template>
                    <div>
                        <DxToolbar>
                            <Items>
                                <DxToolbarItem Click="NewComponentClick" IconCssClass="oi oi-plus"></DxToolbarItem>
                                <DxToolbarItem IconCssClass="oi oi-trash" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true"></DxToolbarItem>
                                <DxToolbarItem Click="UpsertComponents" IconCssClass="oi oi-data-transfer-download" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true"></DxToolbarItem>
                            </Items>
                        </DxToolbar>
                    </div>
                </Template>
            </DxGridLayoutItem>
            <DxGridLayoutItem Row="1" Column="1">
                <Template>
                    <div>
                        <DxFormLayout>

                        </DxFormLayout>
                    </div>
                </Template>
            </DxGridLayoutItem>
        </Items>
    </DxGridLayout>
}
<DxPopup @bind-Visible="@popupVisible" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="true" Width="50rem">
    <HeaderTemplate>
        <div class="w-100 p-3 border border-bottom">
            <DxToolbar>
                <Items>
                    <DxToolbarItem IconCssClass="oi oi-x" Click="ClosePopup" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                </Items>
            </DxToolbar>
        </div>
    </HeaderTemplate>
    <BodyContentTemplate Context="bodycontext">
        <DxFormLayout>
            <DxFormLayoutItem Caption="Type" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                <DxComboBox Data="@targetTypes" @bind-Value="@targetMapComponent.Type"></DxComboBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem ColSpanLg="6">
                @if (targetMapComponent.Type == 0)
                {
                    <DxComboBox Data="@stations" @bind-Value="@targetMapComponent.StationId" ValueFieldName="@(nameof(Station.Id))" TextFieldName="@(nameof(Station.Name))"></DxComboBox>
                }
                else if (targetMapComponent.Type == 1)
                {

                    <DxComboBox Data="@machines" @bind-Value="@targetMapComponent.MachineId" ValueFieldName="@(nameof(Machine.Id))" TextFieldName="@(nameof(Machine.Name))"></DxComboBox>

                }
                else
                {

                }
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="X" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                <DxSpinEdit @bind-Value="@targetMapComponent.PositionX"></DxSpinEdit>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Y" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                <DxSpinEdit @bind-Value="@targetMapComponent.PositionY"></DxSpinEdit>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Width" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                <DxSpinEdit @bind-Value="@targetMapComponent.Width"></DxSpinEdit>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Height" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                <DxSpinEdit @bind-Value="@targetMapComponent.Height"></DxSpinEdit>
            </DxFormLayoutItem>
        </DxFormLayout>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton Click="AddComponent" RenderStyle="ButtonRenderStyle.Primary" IconCssClass="oi oi-check" />
    </FooterContentTemplate>
</DxPopup>

@code {
    [Parameter]
    public string Id { get; set; }

    private MapConfig? mapConfig;
    private bool hasMapConfig => mapConfig != null;
    private bool hasImage => hasMapConfig && mapConfig.Image != null;

    private IEnumerable<MapComponent> mapComponents;
    private MapComponent? targetMapComponent;

    private IEnumerable<TargetType> targetTypes => Enum.GetValues(typeof(TargetType)).Cast<TargetType>();

    private IEnumerable<Station> stations;
    private IEnumerable<Machine> machines;


    private bool popupVisible = false;

    private void ShowPopup() => popupVisible = true;
    private void ClosePopup() => popupVisible = false;


    protected override async Task OnInitializedAsync()
    {
        await InitParameter();
        await base.OnInitializedAsync();
    }

    private async Task InitParameter()
    {
        mapConfig = await shopfloorService.GetMapConfigAndComponentById(new Guid(Id));
        stations = await shopfloorService.GetAllStationsConfig();
        machines = await shopfloorService.GetAllMachinesConfig();

    }

    private void NewComponentClick()
    {
        targetMapComponent = new MapComponent(mapConfig.Id);
        ShowPopup();
    }

    private void AddComponent()
    {
        mapConfig?.MapComponents.Add(targetMapComponent);
        ShowPopup();
    }

    private async Task UpsertComponents()
    {
        await shopfloorService.UpsertMapComponents(mapConfig.MapComponents);
    }

}
