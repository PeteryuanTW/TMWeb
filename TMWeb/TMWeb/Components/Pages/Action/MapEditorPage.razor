@page "/MapEditorPage/{Id}"
@rendermode InteractiveServer
@inject IJSRuntime js

<div class="w-100 h-100">
    @if (hasImage)
    {
        <DxGridLayout RowSpacing="1rem" ColumnSpacing="1rem">
            <Rows>
                <DxGridLayoutRow Height="1fr"></DxGridLayoutRow>
                <DxGridLayoutRow Height="11fr"></DxGridLayoutRow>
            </Rows>
            <Columns>
                <DxGridLayoutColumn Width="10fr"></DxGridLayoutColumn>
                <DxGridLayoutColumn Width="2fr"></DxGridLayoutColumn>
            </Columns>
            <Items>
                <DxGridLayoutItem Row="0" Column="0" RowSpan="2">
                    <Template>
                        <div class="h-100 w-100 position-relative" @ondrop="OnDrop" ondragover="event.preventDefault();">
                            <img class="h-100 w-100 p-3 position-absolute" src="@($"data:{mapConfig.Image.DataType};base64,{Convert.ToBase64String(mapConfig.Image.DataByte ?? Array.Empty<byte>())}") " />
                            <div @ref="shapeLayer" class="h-100 w-100 p-3 position-absolute"
                                 @onclick="SetTargetNull">
                                @* ondragover="event.preventDefault();" *@
                                @foreach (MapComponent mapComponent in mapComponents)
                                {
                                    @if (!mapComponent.IsRunningCommand)
                                    {
                                        <MapEditComponent MapComponentConfig="@mapComponent" IsMain="@IsMain(mapComponent.Id)" MapEditCommandCallback="MapEditCommandChanged" ShapePanelSize="@shapePanelSize" ClickCallback="OnComponentClicked" />
                                    }
                                }

                            </div>
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Row="0" Column="1">
                    <Template>
                        <div>
                            <DxToolbar>
                                <Items>
                                    <DxToolbarItem Click="NewComponentClick" IconCssClass="oi oi-plus"></DxToolbarItem>
                                    <DxToolbarItem Click="DeleteComponent" Enabled="@componentSelected" IconCssClass="oi oi-trash" Alignment="ToolbarItemAlignment.Right" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true"></DxToolbarItem>
                                    <DxToolbarItem Click="UpdateComponentAttribute" IconCssClass="oi oi-data-transfer-download" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true"></DxToolbarItem>
                                    @* <DxToolbarItem>
                                <Template>
                                <DxComboBox Data="mapComponents" @bind-Value="@targetMapComponent" TextFieldName="@(nameof(MapComponent.MachineId))" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"></DxComboBox>
                                </Template>
                                </DxToolbarItem> *@
                                </Items>
                            </DxToolbar>
                        </div>
                    </Template>
                </DxGridLayoutItem>
                <DxGridLayoutItem Row="1" Column="1">
                    <Template>
                        <div class="w-100 h-75">
                            <DxFormLayout ItemCaptionAlignment="ItemCaptionAlignment.None">
                                <DxFormLayoutItem Caption="target" ColSpanLg="12" CaptionPosition="CaptionPosition.Horizontal">
                                    <hr />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" BeginRow="true" ColSpanLg="12">
                                    <DxComboBox Data="@mapComponents" @bind-Value="@targetMapComponent" TextFieldName="@(nameof(MapComponent.Id))" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"></DxComboBox>
                                </DxFormLayoutItem>
                               
                                @if (componentSelected)
                                {
                                    <DxFormLayoutItem Caption="Command" ColSpanLg="12" CaptionPosition="CaptionPosition.Horizontal">
                                        <hr />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" BeginRow="true" ColSpanLg="12">
                                        <DxComboBox Data="@mapEditCommand" @bind-Value="@currentMapEditCommand" TextFieldName="@nameof(MapEditCommandWrapperClass.DisplayName)" ValueFieldName="@nameof(MapEditCommandWrapperClass.MapEditCommand)" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"></DxComboBox>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="position & size" ColSpanLg="12" CaptionPosition="CaptionPosition.Horizontal">
                                        <hr />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="X" CaptionPosition="CaptionPosition.Vertical" BeginRow="true" ColSpanLg="6">
                                        <DxSpinEdit @bind-Value="@targetMapComponent.PositionX" Mask="@NumericMask.Percentage"></DxSpinEdit>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Y" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="6">
                                        <DxSpinEdit @bind-Value="@targetMapComponent.PositionY" Mask="@NumericMask.Percentage"></DxSpinEdit>
                                    </DxFormLayoutItem>
                                    @* <DxFormLayoutItem Caption="click offsetX" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                                        <DxSpinEdit Value="@targetMapComponent.MouseOffsetX"></DxSpinEdit>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="click offsetY" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                                        <DxSpinEdit Value="@targetMapComponent.MouseOffsetY"></DxSpinEdit>
                                    </DxFormLayoutItem> *@
                                    <DxFormLayoutItem Caption="Width" CaptionPosition="CaptionPosition.Vertical" BeginRow="true" ColSpanLg="6">
                                        <DxSpinEdit @bind-Value="@targetMapComponent.Width" Mask="@NumericMask.Percentage"></DxSpinEdit>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Height" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="6">
                                        <DxSpinEdit @bind-Value="@targetMapComponent.Height" Mask="@NumericMask.Percentage"></DxSpinEdit>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="binding data" ColSpanLg="12" CaptionPosition="CaptionPosition.Horizontal">
                                        <hr />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Caption="Type" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                                        <DxComboBox Data="@mapComponentTargetType" Value="@targetMapComponent.Type" ValueChanged="@((int i)=>SetComponentType(i))" TextFieldName="@(nameof(MapComponentTargetTypeWrapperClass.DisplayName))" ValueFieldName="@(nameof(MapComponentTargetTypeWrapperClass.Index))"></DxComboBox>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem ColSpanLg="6">
                                        @if (targetMapComponent.Type == 0)
                                        {
                                            <DxComboBox Data="@stations" @bind-Value="@targetMapComponent.TargetId" ValueFieldName="@(nameof(Station.Id))" TextFieldName="@(nameof(Station.Name))"></DxComboBox>
                                        }
                                        else if (targetMapComponent.Type == 1)
                                        {
                                            <DxComboBox Data="@machines" @bind-Value="@targetMapComponent.TargetId" ValueFieldName="@(nameof(Machine.Id))" TextFieldName="@(nameof(Machine.Name))"></DxComboBox>
                                        }
                                        else
                                        {

                                        }
                                    </DxFormLayoutItem>
                                }
                            </DxFormLayout>
                        </div>
                    </Template>
                </DxGridLayoutItem>
            </Items>
        </DxGridLayout>
    }
</div>
<DxPopup @bind-Visible="@popupVisible" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="false" Width="50rem">
    <HeaderTemplate>
        <div class="w-100 p-3 border border-bottom">
            <DxToolbar>
                <Items>
                    <DxToolbarItem IconCssClass="oi oi-x" Click="ClosePopup" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                </Items>
            </DxToolbar>
        </div>
    </HeaderTemplate>
    <BodyContentTemplate Context="bodycontext">
        <EditForm Model="@targetMapComponent" Context="EditFormContext" OnValidSubmit="AddComponent">
            <DataAnnotationsValidator />
            <DxFormLayout>
                <DxFormLayoutItem Caption="Type" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                    <DxComboBox Data="@mapComponentTargetType" Value="@targetMapComponent.Type" ValueChanged="@((int i)=>SetComponentType(i))" ValueExpression="@(()=>targetMapComponent.Type)" TextExpression="@(()=>((MapComponentTargetType)targetMapComponent.Type).ToString())" TextFieldName="@(nameof(MapComponentTargetTypeWrapperClass.DisplayName))" ValueFieldName="@(nameof(MapComponentTargetTypeWrapperClass.Index))"></DxComboBox>
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanLg="6">
                    @if (targetMapComponent.Type == 0)
                    {
                        <DxComboBox Data="@stations" @bind-Value="@targetMapComponent.TargetId" ValueFieldName="@(nameof(Station.Id))" TextFieldName="@(nameof(Station.Name))"></DxComboBox>
                    }
                    else if (targetMapComponent.Type == 1)
                    {

                        <DxComboBox Data="@machines" @bind-Value="@targetMapComponent.TargetId" ValueFieldName="@(nameof(Machine.Id))" TextFieldName="@(nameof(Machine.Name))"></DxComboBox>

                    }
                    else
                    {

                    }
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="X" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                    <DxSpinEdit @bind-Value="@targetMapComponent.PositionX"></DxSpinEdit>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Y" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                    <DxSpinEdit @bind-Value="@targetMapComponent.PositionY"></DxSpinEdit>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Width" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                    <DxSpinEdit @bind-Value="@targetMapComponent.Width"></DxSpinEdit>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="Height" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                    <DxSpinEdit @bind-Value="@targetMapComponent.Height"></DxSpinEdit>
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <DxToolbar>
                        <Items>
                            <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                        </Items>
                    </DxToolbar>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </BodyContentTemplate>
</DxPopup>

@code {
    [Parameter]
    public string Id { get; set; }

    private ElementReference shapeLayer { get; set; }
    private Rect shapePanelSize;


    private MapConfig? mapConfig;
    private bool hasMapConfig => mapConfig != null;
    private bool hasImage => hasMapConfig && mapConfig.Image != null;

    private List<MapComponent> mapComponents = new();
    private MapComponent? targetMapComponent;
    private bool componentSelected => targetMapComponent != null;
    private bool IsMain(Guid id) => componentSelected ? id == targetMapComponent.Id : false;


    private IEnumerable<MapComponentTargetTypeWrapperClass> mapComponentTargetType => TypeEnumHelper.GetMapComponentTargetTypeWrapperClass();

    private IEnumerable<Station> stations;
    private IEnumerable<Machine> machines;


    private bool popupVisible = false;

    private void ShowPopup() => popupVisible = true;
    private void ClosePopup() => popupVisible = false;

    public MapEditCommand? currentMapEditCommand;
    private IEnumerable<MapEditCommandWrapperClass> mapEditCommand => TypeEnumHelper.GetMapEditCommandWrapperClass();

    protected override async Task OnInitializedAsync()
    {
        await InitParameter();
        await base.OnInitializedAsync();
    }

    private void MapEditCommandChanged(MapEditCommand? command)
    {
        currentMapEditCommand = command;
    }

    private async Task InitParameter()
    {
        mapConfig = await shopfloorService.GetMapConfigAndComponentById(new Guid(Id));
        mapComponents = mapConfig?.MapComponents.ToList();
        stations = await shopfloorService.GetAllStationsConfig();
        machines = await shopfloorService.GetAllMachinesConfig();
        //InitDiagram();
        //InitNode();
    }


    private async Task OnComponentClicked(Task<Guid> componentId)
    {
        Guid guid = await componentId;
        targetMapComponent = mapComponents.FirstOrDefault(x => x.Id == guid);
        shapePanelSize = await js.InvokeAsync<Rect>("GetPosition", shapeLayer);
        await InvokeAsync(StateHasChanged);
    }



    private void SetComponentType(int i)
    {
        if (componentSelected)
        {
            targetMapComponent.SetType(i);
        }
    }

    private void SetTargetNull(MouseEventArgs e)
    {
        targetMapComponent = null;
    }

    private void NewComponentClick()
    {
        targetMapComponent = new MapComponent(mapConfig.Id);
        ShowPopup();
    }

    private async Task AddComponent()
    {
        //var res = await shopfloorService.UpsertMapComponents(targetMapComponent);
        //await InitParameter();
        mapComponents.Add(targetMapComponent);
        ClosePopup();
        //await InvokeAsync(StateHasChanged);
        //uiService.ShowToast(res);
    }

    private async Task UpdateComponentAttribute()
    {
        var res = await shopfloorService.UpsertMapComponentsAttribute(new Guid(Id), mapComponents);
        //var a = MapDiagram.Nodes.GetEnumerator();
        await InitParameter();
        uiService.ShowToast(res);
    }

    private async Task DeleteComponent()
    {
        mapComponents.Remove(targetMapComponent);
        await InvokeAsync(StateHasChanged);
        //var res = await shopfloorService.DeleteMapComponents(targetMapComponent);
        //await InitParameter();
        //uiService.ShowToast(res);
    }

    private void OnDragstart()
    {

    }

    private async Task OnDrag(MouseEventArgs e)
    {
        if (componentSelected)
        {
            targetMapComponent.PositionX = (e.PageX / shapePanelSize.Width) * 100;
            targetMapComponent.PositionY = (e.PageY / shapePanelSize.Height) * 100;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnDragover(DragEventArgs e)
    {
        targetMapComponent.PositionX = (e.ClientX - targetMapComponent.MouseOffsetX) / shapePanelSize.Width * 100;
        targetMapComponent.PositionY = (e.ClientY - targetMapComponent.MouseOffsetY) / shapePanelSize.Height * 100;
    }

    private async Task OnDrop(MouseEventArgs e)
    {

        if (componentSelected)
        {
            // double currentX = shapePanelSize.Width * targetMapComponent.PositionX / 100;
            // double currentY = shapePanelSize.Height * targetMapComponent.PositionY / 100;

            // double newX = e.OffsetX;
            // double newY = e.OffsetY;

            // targetMapComponent.PositionX = ((newX - targetMapComponent.MouseOffsetX) / shapePanelSize.Width) * 100;
            // targetMapComponent.PositionY = ((newY - targetMapComponent.MouseOffsetY) / shapePanelSize.Height)*100;

            //targetMapComponent.FinishedCommand();
            await InvokeAsync(StateHasChanged);
            switch (currentMapEditCommand)
            {
                case MapEditCommand.Move:
                    shapePanelSize = await js.InvokeAsync<Rect>("GetPosition", shapeLayer);
                    targetMapComponent.PositionX = (e.ClientX - shapePanelSize.Left) / shapePanelSize.Width * 100;
                    //targetMapComponent.PositionX = (e.OffsetX - targetMapComponent.MouseOffsetX) / shapePanelSize.Width * 100;
                    targetMapComponent.PositionY = (e.ClientY - shapePanelSize.Top) / shapePanelSize.Height * 100;
                    //targetMapComponent.PositionY = (e.OffsetY - targetMapComponent.MouseOffsetY) / shapePanelSize.Height * 100;
                    ResetCommand();
                    break;
                case MapEditCommand.Resize:
                    targetMapComponent.Width = (e.ClientX - shapePanelSize.Left )/ shapePanelSize.Width * 100 - targetMapComponent.PositionX;
                    targetMapComponent.Height = (e.ClientY - shapePanelSize.Top) / shapePanelSize.Height * 100 - targetMapComponent.PositionY;
                    ResetCommand();
                    await InvokeAsync(StateHasChanged);
                    break;
                default:
                    break;
            }

        }
    }

    private void ResetCommand()
    {
        currentMapEditCommand = null;
    }

}
