@page "/{ProcessID}/StationAction"
@rendermode InteractiveServer

<div class="h-100">
    <DxDrawer @bind-IsOpen="@drawerVisible" PanelWidth="20rem" Mode="DrawerMode.Overlap" Position="DrawerPosition.Right" CloseOnEscape="false">
        <HeaderTemplate>
            <DxToolbar ItemRenderStyleMode="@ToolbarRenderStyleMode.Contained" SizeMode="SizeMode.Large" Title="@($"{localizer["Deploy"]}")">
                <Items>
                    <DxToolbarItem RenderStyle="ButtonRenderStyle.Danger" IconCssClass="oi oi-x" Click="CloseDrawer" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" />
                </Items>
            </DxToolbar>
        </HeaderTemplate>
        <BodyTemplate>
            <DxFormLayout CssClass="w-100">
                <DxFormLayoutItem Caption="@($"{localizer["Workorder"]}")" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <DxComboBox Data="@workorders_start" @bind-Value="@selectedWorkorder_start" EditFormat="{0}-{1}">
                        <Columns>
                            <DxListEditorColumn Caption="@($"{localizer["Workorder"]}")" FieldName="@nameof(Workorder.WorkorderNo)" />
                            <DxListEditorColumn Caption="@($"{localizer["Lot"]}")" FieldName="@nameof(Workorder.Lot)" />
                            <DxListEditorColumn Caption="@($"{localizer["Status"]}")" FieldName="@nameof(Workorder.Status)" />
                        </Columns>
                    </DxComboBox>
                </DxFormLayoutItem>
            </DxFormLayout>
        </BodyTemplate>
        <FooterTemplate>
            <DxToolbar ItemRenderStyleMode="@ToolbarRenderStyleMode.Contained" SizeMode="SizeMode.Large">
                <Items>
                    <DxToolbarItem RenderStyle="ButtonRenderStyle.Info" Enabled="@hasWO_start" IconCssClass="oi oi-data-transfer-download" Click="@(async () => await SetAllStationsWorkorder(selectedWorkorder_start))" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" />
                </Items>
            </DxToolbar>
        </FooterTemplate>
        <TargetContent>
            <DxStackLayout Orientation="Orientation.Vertical" ItemSpacing="1rem" CssClass="h-100">
                <Items>
                    <DxStackLayoutItem Length="1fr">
                        <Template>
                            <div>
                                <DxToolbar ItemRenderStyleMode="@ToolbarRenderStyleMode.Contained" SizeMode="SizeMode.Large" Title="@process.Name">
                                    <Items>
                                        <DxToolbarItem RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="oi oi-plus" Click="ShowDrawer" BeginGroup="true" />
                                        <DxToolbarItem RenderStyle="ButtonRenderStyle.Success" IconCssClass="oi oi-media-play" Click="RunAllStations" BeginGroup="true" />
                                        <DxToolbarItem RenderStyle="ButtonRenderStyle.Warning" IconCssClass="oi oi-media-pause" Click="PauseAllStations" BeginGroup="true" />
                                        <DxToolbarItem RenderStyle="ButtonRenderStyle.Danger" IconCssClass="oi oi-media-stop" Click="StopAllStations" BeginGroup="true" />
                                        <DxToolbarItem RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="oi oi-reload" Click="ResetAllStations" BeginGroup="true" />
                                    </Items>
                                </DxToolbar>
                            </div>
                        </Template>
                    </DxStackLayoutItem>
                    <DxStackLayoutItem Length="9fr">
                        <Template>
                            <div class="overflow-auto h-100 w-100 d-flex flex-wrap align-sa gap-1 justify-content-center m-auto">
                                @foreach (Station station in currentPageStations)
                                {
                                    <StationComponentFactory StationParam="@station" />
                                }
                            </div>
                        </Template>
                    </DxStackLayoutItem>
                    <DxStackLayoutItem Length="1fr">
                        <Template>
                            <div class="d-flex flex-wrap align-content-center justify-content-center">
                                <DxSpinEdit @bind-Value="@amountPerPage" MinValue="1"></DxSpinEdit>
                                <DxPager PageCount="@pageCount"
                                         @bind-ActivePageIndex="@currentPage"
                                         NavigationMode=@PagerNavigationMode.InputBox />
                            </div>
                        </Template>
                    </DxStackLayoutItem>
                </Items>
            </DxStackLayout>
            @* <div class="container-fluid overflow-y-auto" style="height: 100vh">
                <div class="row">
                    <div class="col-12">
                        <DxToolbar ItemRenderStyleMode="@ToolbarRenderStyleMode.Contained" SizeMode="SizeMode.Large" Title="@process.Name">
                            <Items>
                                <DxToolbarItem RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="oi oi-plus" Click="ShowDrawer" BeginGroup="true" />
                                <DxToolbarItem RenderStyle="ButtonRenderStyle.Success" IconCssClass="oi oi-media-play" Click="RunAllStations" BeginGroup="true" />
                                <DxToolbarItem RenderStyle="ButtonRenderStyle.Warning" IconCssClass="oi oi-media-pause" Click="PauseAllStations" BeginGroup="true" />
                                <DxToolbarItem RenderStyle="ButtonRenderStyle.Danger" IconCssClass="oi oi-media-stop" Click="StopAllStations" BeginGroup="true" />
                                <DxToolbarItem RenderStyle="ButtonRenderStyle.Secondary" IconCssClass="oi oi-reload" Click="ResetAllStations" BeginGroup="true" />
                            </Items>
                        </DxToolbar>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 overflow-y-auto h-100 w-100 d-flex flex-wrap align-content-center gap-1 justify-content-center">
                        @foreach (Station station in currentPageStations)
                        {
                            <StationComponentFactory StationParam="@station" />
                        }
                    </div>
                </div>
                 <div class="row">
                    <div class="col-12">
                        <DxSpinEdit @bind-Value="@amountPerPage" MinValue="1"></DxSpinEdit>
                        <DxPager PageCount="@pageCount"
                                 @bind-ActivePageIndex="@currentPage"
                                 NavigationMode=@PagerNavigationMode.InputBox />
                    </div>
                </div> 
            </div> *@
        </TargetContent>
    </DxDrawer>

</div>

@code {
    [Parameter]
    public string ProcessID { get; set; }
    Process? process;

    private List<Station> stations = new();
    private List<Station> currentPageStations => stations.Skip(amountPerPage * (currentPage)).Take(amountPerPage).ToList();

    private List<Workorder> workorders_start = new();
    private Workorder? selectedWorkorder_start;
    private bool hasWO_start => selectedWorkorder_start != null;


    private bool drawerVisible = false;

    private int totalStationAmount => stations.Count();
    private int pageCount => totalStationAmount % amountPerPage == 0 ? totalStationAmount / amountPerPage : totalStationAmount / amountPerPage + 1;
    private int amountPerPage;
    private int currentPage;

    protected override async Task OnInitializedAsync()
    {
        process = await shopfloorService.GetProcessByID(new Guid(ProcessID));
        stations = await shopfloorService.GetStationsByProcessID(new Guid(ProcessID));
        amountPerPage = totalStationAmount;
    }

    private void SelectedNewPage(int i)
    {
        currentPage = i;
    }

    private async Task SetAllStationsWorkorder(Workorder wo)
    {
        List<Task> tasks = new();
        foreach (Station station in stations)
        {
            tasks.Add(Task.Run(() =>
            {
                station.SetWorkorder(wo);
            }));
        }
        await Task.WhenAll(tasks);
        CloseDrawer();
    }

    private async Task ShowDrawer()
    {
        await GetDrawerData();
        drawerVisible = true;
    }

    private async Task GetDrawerData()
    {
        //Process? process = await shopfloorService.GetProcessByID(new Guid(ProcessID));
        if (process != null)
        {
            workorders_start = await shopfloorService.GetWorkordersByProcessAndStatus(process.Id, new List<int> { 0, 1 });
        }
    }

    private void CloseDrawer()
    {
        drawerVisible = false;
    }

    private async Task RunAllStations()
    {
        List<Task> tasks = new();
        foreach (Station station in stations)
        {
            tasks.Add(Task.Run(async () =>
            {
                await shopfloorService.RunStationByName(station.Name);
            }));
        }
        await Task.WhenAll(tasks);
    }

    private async Task PauseAllStations()
    {
        List<Task> tasks = new();
        foreach (Station station in stations)
        {
            tasks.Add(Task.Run(async () =>
            {
                //await shopfloorServiceDataService.PauseStationByName(stationConfig.Name);
            }));
        }
        await Task.WhenAll(tasks);
    }

    private async Task StopAllStations()
    {
        List<Task> tasks = new();
        foreach (Station station in stations)
        {
            tasks.Add(Task.Run(async () =>
            {
                await shopfloorService.StopStationByName(station.Name);
            }));
        }
        await Task.WhenAll(tasks);
    }



    private async Task ResetAllStations()
    {
        List<Task> tasks = new();
        foreach (Station station in stations)
        {
            tasks.Add(Task.Run(async () =>
            {
                //await shopfloorServiceDataService.ResetStationByName(stationConfig.Name);
            }));
        }
        await Task.WhenAll(tasks);
    }
}
