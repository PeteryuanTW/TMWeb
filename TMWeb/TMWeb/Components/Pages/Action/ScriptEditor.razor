@page "/ScriptEditor/{ScriptID}"
@rendermode InteractiveServer
@inject ScriptLoaderService scriptLoaderService
@inject IJSRuntime js
@using BlazorMonaco.Editor
@using System.Reflection

<style>
    .codeeditor {
        height: 95%;
    }
</style>

<DxLoadingPanel CssClass="w-100" Visible="@showPanel" ApplyBackgroundShading="true" IsContentBlocked="true" IndicatorVisible="true" IndicatorAnimationType="WaitIndicatorAnimationType.Flip">
    <IndicatorTemplate>
        <div class="loadingIcon" role="img"></div>
    </IndicatorTemplate>
    <ChildContent>
        <div class="w-100 h-100">
            <DxGridLayout ColumnSpacing="1rem" RowSpacing="1rem">
                <Rows>
                    <DxGridLayoutRow Height="auto"></DxGridLayoutRow>
                    <DxGridLayoutRow Height="7fr"></DxGridLayoutRow>
                    <DxGridLayoutRow Height="3fr"></DxGridLayoutRow>
                </Rows>
                <Columns>
                    <DxGridLayoutColumn Width="6fr"></DxGridLayoutColumn>
                    <DxGridLayoutColumn Width="3fr"></DxGridLayoutColumn>
                </Columns>
                <Items>
                    <DxGridLayoutItem Row="0" Column="0" ColumnSpan="2">
                        <Template>
                            <div class="h-100" style="display: flex; justify-content: center; align-items: center;">
                                <DxToolbar SizeMode="SizeMode.Large">
                                    <DxToolbarItem Tooltip="Save"
                                                   Alignment="ToolbarItemAlignment.Left"
                                                   RenderStyle="ButtonRenderStyle.Info"
                                                   IconUrl="images\MyIcon\save.svg"
                                                   Click="SaveCode"
                                                   BeginGroup="true" />
                                    <DxToolbarItem Tooltip="Compile"
                                                   Alignment="ToolbarItemAlignment.Left"
                                                   RenderStyle="ButtonRenderStyle.Warning"
                                                   IconCssClass="oi oi-bug"
                                                   Click="Compile"
                                                   BeginGroup="true" />  @* Enabled="@allowCompile" *@
                                    <DxToolbarItem Tooltip="Deploy"
                                                   Alignment="ToolbarItemAlignment.Left"
                                                   RenderStyle="ButtonRenderStyle.Success"
                                                   IconUrl="images\MyIcon\deploy.svg"
                                                   BeginGroup="true"
                                                   Click="Deploy" />
                                </DxToolbar>
                            </div>
                        </Template>
                    </DxGridLayoutItem>
                    <DxGridLayoutItem Row="1" Column="0" RowSpan="2">
                        <Template>
                            <div class="h-100">
                                <StandaloneCodeEditor @ref="@standaloneCodeEditor" CssClass="codeeditor" OnDidInit="EditorDidInit" ConstructionOptions="EditorConstructionOptions" OnDidChangeModelContent="OnCodeChanged" OnKeyDown="Shortcut" />
                            </div>
                        </Template>
                    </DxGridLayoutItem>
                    <DxGridLayoutItem Row="1" Column="1">
                        <Template>
                            <div class="h-100 overflow-auto">
                                <ul class="list-group">
                                    @foreach (var scriptDiagnos in scriptDiagnoses)
                                    {
                                        <li class=@($"list-group-item list-group-item-{@SeverityStyle(scriptDiagnos.Severity)}")>
                                            @($"{scriptDiagnos.StartPosString} {scriptDiagnos.Message}")
                                        </li>
                                    }
                                </ul>
                            </div>
                        </Template>
                    </DxGridLayoutItem>
                    <DxGridLayoutItem Row="2" Column="1">
                        <Template>
                            <div class="h-100 overflow-auto">
                                <DxMemo @bind-Text="@diagnoseResultString" CssClass="h-100" ResizeMode="MemoResizeMode.Disabled" ReadOnly="true"></DxMemo>
                            </div>
                        </Template>
                    </DxGridLayoutItem>
                </Items>
            </DxGridLayout>
        </div>
    </ChildContent>
</DxLoadingPanel>

@code {
    [Parameter]
    public string? ScriptID { get; set; }


    public ScriptConfig? scriptConfig;
    private bool hasScriptConfig => scriptConfig != null;

    private bool hasRegister = false;
    private bool showPanel => !hasRegister;
    private DotNetObjectReference<ScriptLoaderService> _objRef;

    //private string code = string.Empty;

    private string diagnoseResultString = string.Empty;

    private Assembly? assembly;

    private StandaloneCodeEditor? standaloneCodeEditor { get; set; }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "csharp",
                Theme = "vs-dark"
            };
    }

    private IEnumerable<ScriptDiagnosis> scriptDiagnoses = new List<ScriptDiagnosis>();
    private bool allowCompile => scriptDiagnoses.Count(x => x.Severity == 3) == 0;

    protected override async Task OnInitializedAsync()
    {
        scriptConfig = scriptService.GetScriptByID(new Guid(ScriptID));
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!hasRegister)
        {
            _objRef = DotNetObjectReference.Create(scriptLoaderService);
            await js.InvokeAsync<string>("registerProvider", _objRef);
            await js.InvokeVoidAsync("blockBtnEvent");
            hasRegister = true;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task EditorDidInit()
    {
        await ReadCode();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ReadCode()
    {
        if (hasScriptConfig)
        {
            try
            {
                await standaloneCodeEditor?.SetValue(scriptConfig.SuorceCode);//await File.ReadAllTextAsync($"{scriptService.Root}\\{scriptConfig.ScriptName}.script")
                uiService.ShowToast(new(1, $"Read script {scriptConfig.ScriptName} success"));
            }
            catch (Exception ex)
            {
                uiService.ShowToast(new(4, $"Read script {scriptConfig.ScriptName} fail({ex.Message})"));

            }
        }
        else
        {
            uiService.ShowToast(new(4, $"Script miss"));
        }
    }

    private async Task Shortcut(BlazorMonaco.KeyboardEvent kbEvent)
    {
        if (kbEvent.CtrlKey)
        {
            if (kbEvent.KeyCode == BlazorMonaco.KeyCode.KeyS)
            {
                await SaveCode();
            }
        }
    }

    private async Task SaveCode()
    {
        await GetCodeFromEditor();
        //await File.WriteAllTextAsync($"{scriptService.Root}\\{scriptConfig.ScriptName}.script", code);
        var res = await scriptService.UpdateScriptCode(scriptConfig);
        uiService.ShowToast(res);

    }

    private async Task GetCodeFromEditor()
    {
        scriptConfig.SuorceCode = await standaloneCodeEditor?.GetValue();
    }


    private async Task OnCodeChanged(ModelContentChangedEvent e)
    {
        await GetCodeFromEditor();
        var uri = (await standaloneCodeEditor.GetModel()).Uri;
        //var diagnoseResult = await scriptLoaderService.GetDiagnosticsAsync(code);
        scriptDiagnoses = await scriptLoaderService.GetDiagnosticsAsync(scriptConfig.SuorceCode);
        try
        {
            await js.InvokeVoidAsync("setDiagnostics", scriptDiagnoses, uri);//diagnoseResult.Select(x => new ScriptDiagnosis(x))
        }
        catch (Exception ee)
        {

        }
        diagnoseResultString = await GetDiagnosisString(scriptDiagnoses);
        await InvokeAsync(StateHasChanged);
    }

    public string SeverityStyle(int s) =>
       s switch
       {
           0 => "light",
           1 => "info",
           2 => "warning",
           3 => "danger",
           _ => "light",
       };

    private async Task<string> GetDiagnosisString(IEnumerable<ScriptDiagnosis> diagnostics)
    {
        var errors = new StringBuilder();
        foreach (ScriptDiagnosis diagnostic in diagnostics)
        {
            //var startLinePos = diagnostic.Location.GetLineSpan().StartLinePosition;
            //var err = $"{diagnostic.Severity.ToString()} ({startLinePos.Line + 1}, {startLinePos.Character - 2}) {diagnostic.Id} {diagnostic.GetMessage()}";
            var err = $"{diagnostic.Severity.ToString()} ({diagnostic.Start.Line}, {diagnostic.Start.Character}) {diagnostic.Message}";
            errors.AppendLine(err);
        }
        return errors.ToString();
    }

    private async Task Compile()
    {
        await GetCodeFromEditor();
        try
        {
            assembly = await scriptLoaderService.CompileToDLLAssembly(scriptConfig.SuorceCode, release: true);
            diagnoseResultString = $"[{DateTime.Now}]:Compile success";
        }
        catch (Exception e)
        {
            diagnoseResultString = $"[{DateTime.Now}]:{e.Message}";
        }
    }

    private async Task Deploy()
    {
        await SaveCode();
        var mytype = assembly.GetType($"TMWeb.Scripts.Source.{scriptConfig.ScriptName}");
        var instance = (ScriptBaseClass)Activator.CreateInstance(mytype, shopfloorService);
        scriptService.DeployScriptByID(scriptConfig.Id, instance);
    }
}
