@using System.Net.Sockets;
@using NModbus
@page "/ModbusTCPTesting"
@implements IDisposable
@rendermode InteractiveServer
<DxGridLayout RowSpacing="3rem" ColumnSpacing="3rem">
    <Rows>
        <DxGridLayoutRow Height="5rf" />
        <DxGridLayoutRow Height="5fr" />
    </Rows>
    <Columns>
        <DxGridLayoutColumn Width="5fr" />
        <DxGridLayoutColumn Width="5fr" />
    </Columns>
    <Items>
        <DxGridLayoutItem Row="0" Column="0">
            <Template>
                <DxFormLayout>
                    <DxFormLayoutGroup>
                        <DxFormLayoutItem Caption="IP" CaptionPosition="CaptionPosition.Vertical">
                            <DxTextBox @bind-Text="@ip" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Port" CaptionPosition="CaptionPosition.Vertical">
                            <DxSpinEdit @bind-Value="@port"></DxSpinEdit>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical">
                            <DxButton Click="CommandToServer" RenderStyle="@serverStatusBtnStyle" IconCssClass="@($"oi oi-link-{serverStatusIcon}")"></DxButton>
                        </DxFormLayoutItem>
                    </DxFormLayoutGroup>

                </DxFormLayout>
            </Template>
        </DxGridLayoutItem>
        <DxGridLayoutItem Row="1" Column="0">
            <Template>
                @if (connected)
                {
                    <DxFormLayout>
                        <DxFormLayoutGroup>
                            <DxFormLayoutItem Caption="Station" CaptionPosition="CaptionPosition.Vertical">
                                <DxSpinEdit @bind-Value="@station"></DxSpinEdit>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Function" CaptionPosition="CaptionPosition.Vertical">
                                <DxComboBox Data="@modbusTcpCommand" Value="@cmd" ValueChanged="@((ModbusTCPAction? act)=>CommandChanged(act))"></DxComboBox>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Start" CaptionPosition="CaptionPosition.Vertical">
                                <DxSpinEdit Value="@startIndex" ValueChanged="@((int i)=>StartChanged(i))" MinValue="0"></DxSpinEdit>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Caption="Offset" CaptionPosition="CaptionPosition.Vertical">
                                <DxSpinEdit Value="@offset" ValueChanged="@((int o)=>OffsetChanged(o))" ReadOnly="@isSingle"></DxSpinEdit>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" BeginRow="true">
                                <DxButton Click="CommandRun" IconCssClass="oi oi-chevron-right"></DxButton>
                            </DxFormLayoutItem>
                        </DxFormLayoutGroup>

                    </DxFormLayout>
                }

            </Template>
        </DxGridLayoutItem>
        <DxGridLayoutItem Row="0" Column="1" ColumnSpan="2">
            <Template>
                <DxFormLayout>
                    @if (connected)
                    {
                        <DxFormLayoutGroup>
                            @foreach (Tag val in values)
                            {
                                <DxFormLayoutItem Caption="@(val.Int1.ToString())" CaptionPosition="CaptionPosition.Vertical" ColSpanLg="3">
                                    @if (isBool)
                                    {
                                        <DxCheckBox Checked="@(Convert.ToBoolean(val.ValueString))" CheckedChanged="@((bool b)=>SetInput(val, b))" ReadOnly="@isRead" CheckType="CheckType.Switch" />
                                    }
                                    else
                                    {
                                        <DxSpinEdit Value="@(Convert.ToUInt16(val.Value))" ValueChanged="@((ushort u)=>SetInput(val, u))" ReadOnly="@isRead" />
                                    }
                                </DxFormLayoutItem>
                            }
                        </DxFormLayoutGroup>
                        
                    }

                </DxFormLayout>
            </Template>
        </DxGridLayoutItem>
    </Items>

</DxGridLayout>
@code {
    private string ip = string.Empty;
    private int port = 0;

    private TcpClient? tcpClient;
    private IModbusFactory? modbusFactory;
    public IModbusMaster? master;

    private bool connected = false;
    private void connectSuccess() => connected = true;
    private void connectFail() => connected = false;
    private string serverStatusIcon => connected ? "broken" : "intact";
    private ButtonRenderStyle serverStatusBtnStyle => connected ? ButtonRenderStyle.Danger : ButtonRenderStyle.Success;


    private IEnumerable<ModbusTCPAction> modbusTcpCommand = Enum.GetValues(typeof(ModbusTCPAction)).Cast<ModbusTCPAction>();
    private ModbusTCPAction? cmd;
    private bool commandSelected => cmd != null;

    private int station = 1;
    private ushort startIndex = 0;
    private ushort offset = 1;

    private bool isRead => commandSelected ? (int)cmd < 4 : false;

    private bool isBool => commandSelected ? (int)cmd == 1 || (int)cmd == 2 || (int)cmd == 5 || (int)cmd == 15 : false;

    private bool isSingle => commandSelected ? (int)cmd == 5 || (int)cmd == 6 : false;

    private List<Tag> values = new();

    protected override Task OnInitializedAsync()
    {
        ip = "127.0.0.1";
        port = 502;
        cmd = modbusTcpCommand.FirstOrDefault();
        tcpClient = new TcpClient();
        modbusFactory = new ModbusFactory();
        return base.OnInitializedAsync();
    }

    void IDisposable.Dispose()
    {
        TryDisconnect();
    }

    private async Task CommandToServer()
    {
        if (!connected)
        {
            await TryConnect();
        }
        else
        {
            TryDisconnect();
        }
    }

    private async Task TryConnect()
    {
        try
        {
            tcpClient = new TcpClient();
            modbusFactory = new ModbusFactory();
            await tcpClient?.ConnectAsync(ip, port);
            master = modbusFactory?.CreateMaster(tcpClient);
            connectSuccess();
            ParameterCahnged();
            uiService.ShowToast(new RequestResult(2, $"connect to {ip}:{port} success"));
        }
        catch (Exception e)
        {
            connectFail();
            uiService.ShowToast(new RequestResult(4, $"connect to {ip}:{port} fail({e.Message})"));
        }

    }

    private void TryDisconnect()
    {
        try
        {
            tcpClient?.Dispose();
            master?.Dispose();
            connectFail();
            uiService.ShowToast(new RequestResult(2, $"disconnect to {ip}:{port} success"));
        }
        catch (Exception e)
        {
            uiService.ShowToast(new RequestResult(4, $"disconnect to {ip}:{port} fail({e.Message})"));
        }
    }

    private void CommandChanged(ModbusTCPAction? act)
    {
        cmd = act;
        ParameterCahnged();
    }

    private void StartChanged(int i)
    {
        startIndex = (ushort)i;
        ParameterCahnged();
    }

    private void OffsetChanged(int o)
    {
        offset = (ushort)o;
        ParameterCahnged();
    }

    private async void ParameterCahnged()
    {
        int dataType = 1;
        if (isBool)
        {
            dataType = 1;
        }
        else
        {
            dataType = 2;
        }

        if (isSingle)
        {
            offset = 1;
        }

        values = new();
        for (int i = 0; i < offset; i++)
        {
            Tag newTag = new Tag()
                {
                    DataType = dataType,
                    Int1 = startIndex + i,
                };
            newTag.Init();
            values.Add(newTag);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task CommandRun()
    {
        try
        {
            switch ((int)cmd)
            {
                case 1:
                    bool[] res1 = await master.ReadCoilsAsync((byte)station, startIndex, offset);
                    SetValues(res1);
                    break;
                case 2:
                    bool[] res2 = await master.ReadInputsAsync((byte)station, startIndex, offset);
                    SetValues(res2);
                    break;
                case 3:
                    ushort[] res3 = await master.ReadHoldingRegistersAsync((byte)station, startIndex, offset);
                    SetValues(res3);
                    break;
                case 4:
                    ushort[] res4 = await master.ReadInputRegistersAsync((byte)station, startIndex, offset);
                    SetValues(res4);
                    break;
                case 5:
                    int len = values.Count();
                    if (len != 1)
                    {
                        uiService.ShowToast(new RequestResult(4, $"length {len} is no approprate for {cmd.ToString()}"));
                        return;
                    }
                    else
                    {
                        bool input1 = Convert.ToBoolean(values.FirstOrDefault().Value);
                        await master.WriteSingleCoilAsync((byte)station, startIndex, input1);
                    }
                    break;
                case 6:
                    int len2 = values.Count();
                    if (len2 != 1)
                    {
                        uiService.ShowToast(new RequestResult(4, $"length {len2} is no approprate for {cmd.ToString()}"));
                        return;
                    }
                    else
                    {
                        ushort input2 = Convert.ToUInt16(values.FirstOrDefault().Value);
                        await master.WriteSingleRegisterAsync((byte)station, startIndex, input2);
                    }
                    break;
                case 15:
                    bool[] input3 = values.Select(x => Convert.ToBoolean(x.Value)).ToArray();
                    await master.WriteMultipleCoilsAsync((byte)station, startIndex, input3);
                    break;
                case 16:
                    ushort[] input4 = values.Select(x => Convert.ToUInt16(x.Value)).ToArray();
                    await master.WriteMultipleRegistersAsync((byte)station, startIndex, input4);
                    break;
                default:
                    break;
            }
            uiService.ShowToast(new RequestResult(2, $"run command {cmd.ToString()} success"));
        }
        catch (Exception e)
        {
            uiService.ShowToast(new RequestResult(4, $"run command {cmd.ToString()} fail({e.Message})"));
        }

        //await InvokeAsync(StateHasChanged);
    }

    private async void SetValues(bool[] bools)
    {
        int len_tag = values.Count();
        int len_res = bools.Length;
        if (len_tag != len_res)
        {
            return;
        }
        for (int i = 0; i < len_tag; i++)
        {
            var a = values[i].ValueString;
            var b = bools[i];
            values.ElementAt(i).SetValue(b);
        }
    }
    private async void SetValues(ushort[] ushorts)
    {
        int len_tag = values.Count();
        int len_res = ushorts.Length;
        if (len_tag != len_res)
        {
            return;
        }
        for (int i = 0; i < len_tag; i++)
        {
            values[i].SetValue(ushorts[i]);
        }
    }

    private async void SetInput(Tag tag, bool b)
    {
        tag.SetValue(b);
    }

    private async void SetInput(Tag tag, ushort u)
    {
        tag.SetValue(u);
    }

}
