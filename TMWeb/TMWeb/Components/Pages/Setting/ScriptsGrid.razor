@page "/Scripts"
@rendermode InteractiveServer

<DxGrid @ref="grid" Data="@scripts" FocusedRowEnabled="true" DataItemDeleting="DeleteScript" FocusedRowChanged="OnFocusedRowChanged"  HighlightRowOnHover="true">
    <ToolbarTemplate>
        <DxToolbar SizeMode="SizeMode.Large" ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
            <DxToolbarItem IconCssClass="oi oi-plus" Click="NewScriptClicked" BeginGroup="true" />
            <DxToolbarItem IconCssClass="oi oi-data-transfer-upload" Visible="false" id="scriptuploadbtn" Alignment="ToolbarItemAlignment.Right" BeginGroup="true" />
            <DxToolbarItem IconCssClass="oi oi-data-transfer-download" Enabled="@scriptSelected" Click="DownloadScript" Alignment="ToolbarItemAlignment.Right" BeginGroup="true" />
            <DxToolbarItem IconCssClass="oi oi-pencil" Enabled="@scriptSelected" Click="ShowPopup" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" />
            <DxToolbarItem IconCssClass="oi oi-code" Enabled="@scriptSelected" Click="NavToEditor" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" />
            <DxToolbarItem IconCssClass="oi oi-terminal" Enabled="@scriptSelected" Click="NavToDashboard" BeginGroup="true" />
            <DxToolbarItem IconCssClass="oi oi-trash" Enabled="@scriptSelected" Click="ShowDelete" Alignment="ToolbarItemAlignment.Right" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" />
        </DxToolbar>
    </ToolbarTemplate>
    <Columns>
        <DxGridDataColumn Caption="@($"{localizer["ID"]}")" FieldName="@nameof(ScriptConfig.Id)" />
        <DxGridDataColumn Caption="@($"{localizer["Name"]}")" FieldName="@nameof(ScriptConfig.ScriptName)" />
        <DxGridDataColumn Caption="@($"{localizer["DelayMilliseconds"]}")" FieldName="@nameof(ScriptConfig.DelayMilliseconds)" />
        <DxGridDataColumn Caption="@($"{localizer["MaxLogCount"]}")" FieldName="@nameof(ScriptConfig.MaxLogCount)" />
        <DxGridDataColumn Caption="@($"{localizer["AutoCompile"]}")" FieldName="@nameof(ScriptConfig.AutoCompile)">
            <CellDisplayTemplate>
                <DxCheckBox CheckType="CheckType.Switch" ReadOnly="true" Checked="@((bool)context.Value)" />
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn Caption="@($"{localizer["AutoRun"]}")" FieldName="@nameof(ScriptConfig.AutoRun)">
            <CellDisplayTemplate>
                <DxCheckBox CheckType="CheckType.Switch" ReadOnly="true" Checked="@((bool)context.Value)" />
            </CellDisplayTemplate>
        </DxGridDataColumn>
    </Columns>
</DxGrid>

<DxPopup @bind-Visible="@popupVisible" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="false" Width="50rem">
    <HeaderTemplate>
        <div class="w-100 p-3 border border-bottom">
            <DxToolbar>
                <Items>
                    <DxToolbarItem IconCssClass="oi oi-x" Click="ClosePopup" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                </Items>
            </DxToolbar>
        </div>
    </HeaderTemplate>
    <BodyContentTemplate Context="bodycontext">
        <EditForm Model="@targetScript" Context="EditFormContext" OnValidSubmit="UpsertScriptConfig">
            <DataAnnotationsValidator />
            <DxFormLayout>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Name"]}")" ColSpanLg="6" BeginRow="true">
                    <DxTextBox @bind-Text="@targetScript.ScriptName" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["DelayMilliseconds"]}")" ColSpanLg="6" BeginRow="true">
                    <DxSpinEdit @bind-Value="@targetScript.DelayMilliseconds" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["MaxLogCount"]}")" ColSpanLg="6" BeginRow="true">
                    <DxSpinEdit @bind-Value="@targetScript.MaxLogCount" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["AutoCompile"]}")" ColSpanLg="6" BeginRow="true">
                    <DxCheckBox CheckType="CheckType.Switch" @bind-Checked="@targetScript.AutoCompile" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["AutoRun"]}")" ColSpanLg="6">
                    <DxCheckBox CheckType="CheckType.Switch" @bind-Checked="@targetScript.AutoRun" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <DxToolbar>
                        <Items>
                            <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                        </Items>
                    </DxToolbar>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </BodyContentTemplate>
</DxPopup>

<DxFileInput Visible="false" SelectedFilesChanged="SelectedFileChanged" FilesUploading="OnFilesUploading" ExternalSelectButtonCssSelector="#scriptuploadbtn"  MaxFileSize="15000000"></DxFileInput>

@code {
    IGrid? grid { get; set; }
    private IEnumerable<ScriptConfig> scripts;
    private ScriptConfig? targetScript;
    private bool scriptSelected => targetScript != null;

    private bool popupVisible;

    private string updateURL => nav.ToAbsoluteUri("/Export/UploadScript").AbsoluteUri;

    protected override async Task OnInitializedAsync()
    {
        await InitParam();
        await base.OnInitializedAsync();
    }

    private async Task InitParam()
    {
        scripts = await scriptService.GetAllScriptsConfig();
    }

    private void OnFocusedRowChanged(GridFocusedRowChangedEventArgs args)
    {
        targetScript = args.DataItem as ScriptConfig;
    }

    private void NewScriptClicked()
    {
        targetScript = new(Guid.NewGuid());
        ShowPopup();
    }

    private void ShowPopup()
    {
        popupVisible = true;
    }

    private async void ClosePopup()
    {
        popupVisible = false;
        await InitParam();
    }

    private async Task UpsertScriptConfig()
    {
        var res = await scriptService.UpsertScript(targetScript);
        ClosePopup();
        uiService.ShowToast(res);
    }

    private void ShowDelete()
    {
        grid?.ShowDataItemDeleteConfirmation(targetScript);
    }

    private async Task DeleteScript()
    {
        var res = await scriptService.DeleteScript(targetScript);
        //CloseMachinePopup();
        await InitParam();
        uiService.ShowToast(new(3, "Script delete isn't implement yet"));
    }

    private void NavToEditor()
    {
        if (scriptSelected)
        {
            nav.NavigateTo($"/ScriptEditor/{targetScript?.Id}");
        }
    }

    private void NavToDashboard()
    {
        if (scriptSelected)
        {
            nav.NavigateTo($"/ScriptDashboard/{targetScript?.Id}");
        }
    }

    private void DownloadScript()
    {
        if (scriptSelected)
        {
            nav.NavigateTo($"/Export/Script?id={targetScript?.Id}", true);
        }
    }

    protected async Task OnFilesUploading(FilesUploadingEventArgs args)
    {
        var file = args.Files[0];
        using var stream = new System.IO.MemoryStream();
        await file.OpenReadStream(file.Size).CopyToAsync(stream);
    }

    private void SelectedFileChanged(IEnumerable<UploadFileInfo> uploadFileInfos)
    {

    }

    private void OnUploadStarted(FileUploadStartEventArgs e)
    {
        
    }
    private void OnUploadCompleted(FileUploadEventArgs e)
    {

    }

    private void UploadFail(FileUploadErrorEventArgs e)
    {
        var a = e.RequestInfo.ResponseText;
    }
}
