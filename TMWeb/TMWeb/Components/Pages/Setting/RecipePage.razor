@page "/Recipe"

@rendermode InteractiveServer

<DxGridLayout RowSpacing="1rem" ColumnSpacing="1rem">
    <Rows>
        <DxGridLayoutRow></DxGridLayoutRow>
    </Rows>
    <Columns>
        <DxGridLayoutColumn Width="3fr"></DxGridLayoutColumn>
        <DxGridLayoutColumn Width="8fr"></DxGridLayoutColumn>
    </Columns>
    <Items>
        <DxGridLayoutItem Row="0" Column="0">
            <Template>
                <div>
                    <DxGrid @ref="@recipeGrid" Data="@recipeConfig" DataItemDeleting="DeleteRecipeCategory" FocusedRowEnabled="true" FocusedRowChanged="SelectedRecipe" HighlightRowOnHover="true">
                        <ToolbarTemplate>
                            <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                                <Items>
                                    <DxToolbarItem IconCssClass="oi oi-plus" Click="NewRecipeClicked" BeginGroup="true" />
                                    <DxToolbarItem IconCssClass="oi oi-pencil" Click="ShowRecipePopup" Enabled="@recipeSelected" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" />
                                    <DxToolbarItem IconUrl="images\myicon\copy.svg" Click="CopyCategoryAndItems" Enabled="@recipeSelected" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" />
                                    <DxToolbarItem IconCssClass="oi oi-trash" Click="ShowRecipeDelete" Enabled="@recipeSelected" RenderStyle="ButtonRenderStyle.Danger" Alignment="ToolbarItemAlignment.Right" BeginGroup="true" />
                                </Items>
                            </DxToolbar>
                        </ToolbarTemplate>
                        <Columns>
                            <DxGridDataColumn FieldName="@nameof(WorkorderRecipeConfig.RecipeCategory)" Caption="@($"{localizer["Recipe"]}")"></DxGridDataColumn>
                        </Columns>
                    </DxGrid>
                </div>
            </Template>
        </DxGridLayoutItem>
        <DxGridLayoutItem Row="0" Column="1">
            <Template>
                <div>
                    <DxGrid @ref="@itemGrid" Data="@recipeItems" DataItemDeleting="DeleteRecipeItem" FocusedRowEnabled="true" FocusedRowChanged="SelectedRecipeItem" HighlightRowOnHover="true">
                        <ToolbarTemplate>
                            <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                                <Items>
                                    <DxToolbarItem IconCssClass="oi oi-plus" Click="NewRecipeItemClicked" BeginGroup="true">
                                        @*                                         <Items>
                                            <DxToolbarItem Text="Static" Click="(()=>{NewRecipeItemClicked(0);})" />
                                            <DxToolbarItem Text="Build" Click="(()=>{NewRecipeItemClicked(1);})" />
                                            <DxToolbarItem Text="Custom" Click="(()=>{NewRecipeItemClicked(2);})" />
                                        </Items> *@
                                    </DxToolbarItem>
                                    <DxToolbarItem IconCssClass="oi oi-pencil" Click="ShowRecipeItemPopup" Enabled="@recipeItemSelected" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" />
                                    <DxToolbarItem IconCssClass="oi oi-trash" Click="ShowItemDelete" Enabled="@recipeItemSelected" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" />
                                </Items>
                            </DxToolbar>
                        </ToolbarTemplate>
                        <Columns>
                            <DxGridDataColumn FieldName="@nameof(RecipeItem.RecipeItemName)"></DxGridDataColumn>
                            <DxGridDataColumn FieldName="@nameof(RecipeItem.ValueExpString)"></DxGridDataColumn>
                        </Columns>
                    </DxGrid>
                </div>
            </Template>
        </DxGridLayoutItem>
    </Items>
</DxGridLayout>

<DxPopup @bind-Visible="@recipePopupVisible" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="false" Width="50rem">
    <HeaderTemplate>
        <div class="w-100 p-3 border border-bottom">
            <DxToolbar>
                <Items>
                    <DxToolbarItem IconCssClass="oi oi-x" Click="CloseRecipePopup" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                </Items>
            </DxToolbar>
        </div>
    </HeaderTemplate>
    <BodyContentTemplate Context="bodycontext">
        <EditForm Model="@targetRecipe" Context="EditFormContext" OnValidSubmit="UpsertRecipeCategory">
            <DataAnnotationsValidator />
            <DxFormLayout>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Name"]}")" ColSpanLg="6" BeginRow="true">
                    <DxTextBox @bind-Text="@targetRecipe.RecipeCategory" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanLg="12" BeginRow="true">
                    <DxToolbar>
                        <Items>
                            <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                        </Items>
                    </DxToolbar>
                </DxFormLayoutItem>

            </DxFormLayout>
        </EditForm>
    </BodyContentTemplate>
</DxPopup>

<DxPopup @bind-Visible="@recipeItemPopupVisible" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="false" Width="50rem" AllowResize="true">
    <HeaderTemplate>
        <div class="w-100 p-3 border border-bottom">
            <DxToolbar>
                <Items>
                    <DxToolbarItem IconCssClass="oi oi-x" Click="CloseRecipeItemPopup" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                </Items>
            </DxToolbar>
        </div>
    </HeaderTemplate>
    <BodyContentTemplate Context="bodycontext">
        <EditForm Model="@targetRecipeItem" Context="EditFormContext" OnValidSubmit="UpsertRecipeItem">
            <DataAnnotationsValidator />
            <DxFormLayout>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Name"]}")" BeginRow="true">
                    <DxTextBox @bind-Text="@targetRecipeItem.RecipeItemName" ShowValidationIcon="true" />
                    <ValidationMessage For="@(() => targetRecipeItem.RecipeItemName)" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Trigger timing"]}")">
                    <DxComboBox Data="@triggerTimingWrapperClasses" @bind-Value="@targetRecipeItem.TriggerTiming" ValueFieldName="@(nameof(WrapperClass.Index))" TextFieldName="@(nameof(WrapperClass.DisplayName))" ShowValidationIcon="true"></DxComboBox>
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Target category"]}")">
                    <DxComboBox Data="@tagCategories" Value="@targetRecipeItem.TargetTagCatId" ValueChanged="((Guid? id) => TargetTagCatSelected(id))" ValueFieldName="@(nameof(TagCategory.Id))" ValueExpression="(()=>targetRecipeItem.TargetTagCatId)" TextFieldName="@(nameof(TagCategory.Name))" ShowValidationIcon="true" />
                    @* ValueChanged="((Guid? id)=>TargetTagCatChanged(id))" ValueExpression="@(() => targetRecipeItem.TargetTagCatId)" *@
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Target tag"]}({TargetTagTypeString})")">
                    <DxComboBox Data="@tagCandidates" Value="@targetRecipeItem.TargetTagId" ValueChanged="((Guid? id)=>TargetTagSelected(id))" ValueFieldName="@(nameof(Tag.Id))" ValueExpression="(()=>targetRecipeItem.TargetTagId)" TextFieldName="@(nameof(Tag.Name))" ShowValidationIcon="true" />
                    @* ValueChanged="((Guid? id)=>TargetTagChanged(id))" ValueExpression="@(() => targetRecipeItem.TargetTagId)" *@
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["DataType"]}")" BeginRow="true">
                    @*<DxComboBox Data="@DataTypes" @bind-Value="@targetRecipeItem.DataType" ValueFieldName="@(nameof(DataTypeWrapperClass.Index))" TextFieldName="@(nameof(DataTypeWrapperClass.DisplayName))" ShowValidationIcon="true"></DxComboBox>*@                    <DxSpinEdit @bind-Value="@targetRecipeItem.DataType"></DxSpinEdit>
                    <ValidationMessage For="@(() => targetRecipeItem.DataType)" />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                <DxFormLayoutItem ColSpanLg="12" Caption="@($"{localizer["Value Expression"]}")" CaptionPosition="CaptionPosition.Vertical">
                    <DxTextBox @bind-Text="@targetRecipeItem.ValueExpString" ShowValidationIcon="true"></DxTextBox>
                    <ValidationMessage For="@(() => targetRecipeItem.DataType)" />
                </DxFormLayoutItem>
                @*                 @if (targetRecipeItem.GetType() == typeof(StaticRecipe))
                {
                    StaticRecipe staticRecipe = targetRecipeItem as StaticRecipe;
                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Value"]}")">
                        <DxTextBox @bind-Text="@staticRecipe.ValueString" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                }
                else if (targetRecipeItem.GetType() == typeof(BuildInRecipe))
                {
                    BuildInRecipe buildInRecipe = targetRecipeItem as BuildInRecipe;
                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Target property"]}")">
                        <DxComboBox Data="@buildInRecipesWithFilter" @bind-Value="@buildInRecipe.TargetProp" ValueFieldName="@(nameof(BuildInRecipeWrapperClass.DisplayName))" TextFieldName="@(nameof(BuildInRecipeWrapperClass.DisplayName))" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                }
                else if (targetRecipeItem.GetType() == typeof(CustomRecipe))
                {
                    CustomRecipe customRecipe = targetRecipeItem as CustomRecipe;
                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Record Category"]}")">
                        <DxComboBox Data="@workorderRecordConfigs" @bind-Value="@customRecipe.TargetRecordCatID"  ValueFieldName="@(nameof(WorkorderRecordConfig.Id))" TextFieldName="@(nameof(WorkorderRecordConfig.WorkorderRecordCategory))" ShowValidationIcon="true" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Workorder Record"]}")" BeginRow="true">
                        <DxComboBox Data="@workorderRecordContentsWithFilter" @bind-Value="@customRecipe.TargetRecordID" ValueFieldName="@(nameof(WorkorderRecordContent.Id))" TextFieldName="@(nameof(WorkorderRecordContent.RecordName))" ShowValidationIcon="true"></DxComboBox>
                    </DxFormLayoutItem>
                } *@
                <DxFormLayoutItem ColSpanLg="12">
                    <hr />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <DxToolbar>
                        <Items>
                            <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                        </Items>
                    </DxToolbar>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </BodyContentTemplate>
</DxPopup>
@code {
    IGrid? recipeGrid { get; set; }
    private IEnumerable<WorkorderRecipeConfig> recipeConfig;

    private WorkorderRecipeConfig? targetRecipe;
    private bool recipeSelected => targetRecipe != null;

    private bool recipeNamed => recipeSelected ? !string.IsNullOrEmpty(targetRecipe.RecipeCategory) : false;

    IGrid? itemGrid { get; set; }
    private IEnumerable<RecipeItem> recipeItems => recipeSelected ? targetRecipe.Recipes : new List<RecipeItem>();
    private RecipeItem? targetRecipeItem;
    private bool recipeItemSelected => targetRecipeItem != null;

    private bool recipePopupVisible;
    private bool recipeItemPopupVisible;

    private IEnumerable<DataTypeWrapperClass> DataTypes => MachineTypeEnumHelper.GetDataTypesWrapperClass().Where(x => x.Index == targetTagTypeCode);
    private IEnumerable<RecipeTriggerTimingWrapperClass> triggerTimingWrapperClasses => TypeEnumHelper.GetRecipeTriggerTimingWrapperClass();

    private IEnumerable<TagCategory>? tagCategories;
    private TagCategory? targetTagCat;
    private bool targetTagCatSelected => targetTagCat != null;
    private IEnumerable<Tag> tagCandidates => machineService.GetTagsByCatId(targetRecipeItem?.TargetTagCatId);

    private bool boolVal;
    private ushort ushortVal;
    private string stringVal = string.Empty;

    private IEnumerable<BuildInRecipeWrapperClass> buildInRecipes = TypeEnumHelper.GetBuildInRecipeWrapperClass();
    private IEnumerable<BuildInRecipeWrapperClass> buildInRecipesWithFilter => targetRecipeItem.hasTarget ? buildInRecipes.Where(x => x.Index == targetRecipeItem.DataType) : new List<BuildInRecipeWrapperClass>();

    private IEnumerable<WorkorderRecordConfig> workorderRecordConfigs;

    private IEnumerable<WorkorderRecordContent> workorderRecordContents => GetWorkorderRecordContentByID();
    private IEnumerable<WorkorderRecordContent> workorderRecordContentsWithFilter => targetRecipeItem.hasTarget ? workorderRecordContents.Where(x => x.DataType == targetRecipeItem.DataType) : new List<WorkorderRecordContent>();

    private int? targetTagTypeCode => machineService.GetTagTypeCodeByIds(targetRecipeItem?.TargetTagCatId, targetRecipeItem?.TargetTagId);
    private string TargetTagTypeString => targetTagTypeCode is null || targetTagTypeCode == 0 ? string.Empty : ((DataType)targetTagTypeCode).ToString();

    protected override async Task OnInitializedAsync()
    {
        await InitParameter();
        tagCategories = await machineService.GetAllTagCategoriesWithTags();
        await base.OnInitializedAsync();
    }

    private async Task InitParameter()
    {
        recipeConfig = await shopfloorService.GetAllRecipes();
        workorderRecordConfigs = await shopfloorService.GetWorkorderRecordAndDetails();
    }

    private IEnumerable<WorkorderRecordContent> GetWorkorderRecordContentByID()
    {
        if (!recipeItemSelected)
        {
            return new List<WorkorderRecordContent>();
        }
        else
        {
            // if (targetRecipeItem.GetType() == typeof(CustomRecipe))
            // {
            //     CustomRecipe customRecipe = targetRecipeItem as CustomRecipe;
            //     if (customRecipe.SourceCatSelected)
            //     {
            //         return shopfloorService.GetWorkorderRecordContentsByConfigID(customRecipe.TargetRecordCatID);

            //     }
            // }
            return new List<WorkorderRecordContent>();
        }
    }

    private void SelectedRecipe(GridFocusedRowChangedEventArgs args)
    {
        targetRecipe = args.DataItem as WorkorderRecipeConfig;
    }

    private void SelectedRecipeItem(GridFocusedRowChangedEventArgs args)
    {
        targetRecipeItem = args.DataItem as RecipeItem;
    }



    private void ShowRecipePopup()
    {
        recipePopupVisible = true;
    }

    private async void CloseRecipePopup()
    {
        recipePopupVisible = false;
        await InitParameter();
    }

    private void NewRecipeClicked()
    {
        GenrateNewRecipe();
        ShowRecipePopup();
    }

    private void GenrateNewRecipe()
    {
        targetRecipe = new WorkorderRecipeConfig(Guid.NewGuid());
    }

    private async Task UpsertRecipeCategory()
    {
        var res = await shopfloorService.UpsertRecipeConfig(targetRecipe);
        await InitParameter();
        CloseRecipePopup();
        uiService.ShowToast(res);
    }

    private async Task CopyCategoryAndItems()
    {
        var res = await shopfloorService.CopyRecipeCatAndItems(targetRecipe);
        await InitParameter();
        CloseRecipePopup();
        uiService.ShowToast(res);
    }

    private void ShowRecipeDelete()
    {
        recipeGrid.ShowDataItemDeleteConfirmation(targetRecipe);
    }

    private async Task DeleteRecipeCategory()
    {
        var res = await shopfloorService.DeleteRecipeConfig(targetRecipe);
        await InitParameter();
        uiService.ShowToast(res);
    }





    #region recipe item

    private void ShowRecipeItemPopup()
    {
        recipeItemPopupVisible = true;
    }

    private async void CloseRecipeItemPopup()
    {
        recipeItemPopupVisible = false;
        await InitParameter();
    }

    private void NewRecipeItemClicked()
    {
        GenrateNewRecipeItem();
        ShowRecipeItemPopup();
    }

    private void GenrateNewRecipeItem()
    {
        targetRecipeItem = new RecipeItem(targetRecipe.Id);
    }

    private void TargetTagCatSelected(Guid? id)
    {
        targetRecipeItem.TargetTagCatId = id;
        targetRecipeItem.TargetTagId = null;
        UpdateDataTypeCode();
    }

    private void TargetTagSelected(Guid? id)
    {
        targetRecipeItem.TargetTagId = id;
        UpdateDataTypeCode();
    }

    private void UpdateDataTypeCode()
    {
        targetRecipeItem.DataType = machineService.GetTagTypeCodeByIds(targetRecipeItem?.TargetTagCatId, targetRecipeItem?.TargetTagId);
    }

    private Tag? GetTagByIDInCandidates(Guid? tagId)
    {
        return tagCandidates.FirstOrDefault(x => x.Id == tagId);
    }


    private async Task UpsertRecipeItem(EditContext editContext)
    {
        if (targetTagTypeCode == targetRecipeItem.DataType)
        {
            // if (editContext.Model.GetType() == typeof(CustomRecipe))
            // {
            //     CustomRecipe? customRecipe = editContext.Model as CustomRecipe;
            //     WorkorderRecordContent? content = await shopfloorService.GetWorkorderRecordContentByID(customRecipe.TargetRecordCatID, customRecipe.TargetRecordID);
            //     if (content is null)
            //     {
            //         uiService.ShowToast(new RequestResult(4, $"Content not found"));
            //         return;
            //     }
            //     else
            //     {
            //         if (targetTagTypeCode != content.DataType)
            //         {
            //             uiService.ShowToast(new RequestResult(4, $"Content type {(DataType)content.DataType} and target type {(DataType)targetTagTypeCode} not match"));
            //             return;
            //         }
            //     }
            // }
            var res = await shopfloorService.UpsertRecipeItem(targetRecipeItem);
            await InitParameter();
            CloseRecipeItemPopup();
            uiService.ShowToast(res);
        }
        else
        {
            var res = new RequestResult(4, $"Target tag type and source type not match");
            uiService.ShowToast(res);
        }
    }

    private void ShowItemDelete()
    {
        itemGrid.ShowDataItemDeleteConfirmation(targetRecipeItem);
    }

    private async Task DeleteRecipeItem()
    {
        var res = await shopfloorService.DeleteRecipeItem(targetRecipeItem);
        await InitParameter();
        uiService.ShowToast(res);
    }
    #endregion
}
