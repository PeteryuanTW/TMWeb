@page "/WorkordersDashboard"
@rendermode InteractiveServer
@inject IStringLocalizer<Language> localizer
@inject NavigationManager nav
@inject TMWebShopfloorService shopfloorService

<DxGridLayout ColumnSpacing="1rem">
    <Rows>
        <DxGridLayoutRow Height="auto"></DxGridLayoutRow>
        <DxGridLayoutRow Height="auto"></DxGridLayoutRow>
    </Rows>
    <Columns>
        <DxGridLayoutColumn Width="100%"></DxGridLayoutColumn>
    </Columns>
    <Items>
        <DxGridLayoutItem Row="1" Column="0">
            <Template>
                <div class="p-3">
                    <DxGrid Data="@workorders" FocusedRowEnabled="true">
                        <Columns>
                            <DxGridDataColumn FieldName="@nameof(Workorder.Status)" Caption="@($"{localizer["Status"]}")" />
                            <DxGridDataColumn FieldName="@nameof(Workorder.WorkorderNo)" />
                            <DxGridDataColumn FieldName="@nameof(Workorder.Lot)" />
                            <DxGridDataColumn FieldName="@nameof(Workorder.PartNo)" />
                            <DxGridDataColumn FieldName="@nameof(Workorder.TargetAmount)" />
                            <DxGridDataColumn FieldName="@nameof(Workorder.Ngamount)" />
                            <DxGridDataColumn FieldName="@nameof(Workorder.Id)" Caption="Detail">
                                <CellDisplayTemplate>
                                    <div class="d-flex justify-content-center">
                                        <DxButton Click="@(()=>NavToWorkorderDetail((context.DataItem as Workorder).Id))" RenderStyle="ButtonRenderStyle.Info" IconCssClass="oi oi-ellipses"></DxButton>
                                    </div>
                                </CellDisplayTemplate>
                            </DxGridDataColumn>
                        </Columns>
                    </DxGrid>
                </div>
            </Template>
        </DxGridLayoutItem>
    </Items>
</DxGridLayout>

@code {
    private List<Workorder> workorders = new();
    Workorder? selectedWorkorder;
    Workorder? detailWorkorder;
    private bool hasRecipe => detailWorkorder.RecipeCategoryId != null;
    //IEnumerable<WorkorderRecipeContent> workorderRecipeContents => detailWorkorder.RecipeCategory == null ? new List<WorkorderRecipeContent>() : detailWorkorder.RecipeCategory.WorkorderRecipeContents;
    //IEnumerable<WorkorderRecordContent> workorderRecordContents => detailWorkorder.WorkorderRecordCategory.WorkorderRecordContents;

    protected override async Task OnInitializedAsync()
    {
        workorders = await shopfloorService.GetAllWorkorders();
    }

    private async void OnFocusedWorkorderChanged(GridFocusedRowChangedEventArgs e)
    {
        selectedWorkorder = e.DataItem as Workorder;
        if (selectedWorkorder != null)
        {
            detailWorkorder = await shopfloorService.GetWorkordersDetails(selectedWorkorder.Id);
        }

    }

    private void NavToWorkorderDetail(Guid id)
    {
        nav.NavigateTo($"/Workorder/{id.ToString()}");
    }
}

