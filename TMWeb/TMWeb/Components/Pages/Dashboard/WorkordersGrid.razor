@page "/WorkordersGrid"
@inherits AuthComponentBase
@rendermode InteractiveServer

<DxGridLayout ColumnSpacing="1rem">
    <Rows>
        <DxGridLayoutRow Height="auto"></DxGridLayoutRow>
        <DxGridLayoutRow Height="auto"></DxGridLayoutRow>
    </Rows>
    <Columns>
        <DxGridLayoutColumn Width="100%"></DxGridLayoutColumn>
    </Columns>
    <Items>
        <DxGridLayoutItem Row="1" Column="0">
            <Template>
                <div class="p-3">
                    <DxGrid @ref="grid" Data="@workorders" FocusedRowEnabled="true" FocusedRowChanged="OnFocusedRowChanged" DataItemDeleting="DeleteWorkorder" HighlightRowOnHover="true">
                        <ToolbarTemplate>
                            <DxToolbar SizeMode="SizeMode.Large" ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                                <DxToolbarItem IconCssClass="oi oi-plus" Click="NewWorkorderClicked" BeginGroup="true" />
                                <DxToolbarItem IconCssClass="oi oi-pencil" Enabled="@canEditOrDelete" Click="ShowPopup" RenderStyle="ButtonRenderStyle.Info" BeginGroup="true" />
                                <DxToolbarItem Enabled="@canEditOrDelete" Click="ShowDelete" IconCssClass="oi oi-trash" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" />
                                <DxToolbarItem Enabled="@workorderSelected" Click="NavToWorkorderDetail" IconCssClass="oi oi-magnifying-glass" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" />
                                @if (authService.IsRole("SuperUser"))
                                {
                                    <DxToolbarItem Enabled="@workorderSelected" Click="ResetWorkorder" IconCssClass="oi oi-reload" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" />
                                }
                            </DxToolbar>
                        </ToolbarTemplate>
                        <Columns>
                            <DxGridDataColumn Caption="@($"{localizer["Status"]}")" FieldName="@nameof(Workorder.Status)">
                                @* <CellDisplayTemplate>
                                <div class="@($"oi oi-{GetWorkorderStatusIcon((Workorder)context.DataItem)}") text-ali"></div>
                                </CellDisplayTemplate> *@
                            </DxGridDataColumn>
                            <DxGridDataColumn Caption="@($"{localizer["Workorder"]}")" FieldName="@nameof(Workorder.WorkorderNo)" />
                            <DxGridDataColumn Caption="@($"{localizer["Lot"]}")" FieldName="@nameof(Workorder.Lot)" />
                            <DxGridDataColumn Caption="@($"{localizer["Part No"]}")" FieldName="@nameof(Workorder.PartNo)" />
                            <DxGridDataColumn Caption="@($"{localizer["Target"]}")" FieldName="@nameof(Workorder.TargetAmount)" />
                            <DxGridDataColumn Caption="@($"{localizer["OK"]}")" FieldName="@nameof(Workorder.Ngamount)" />
                            <DxGridDataColumn Caption="@($"{localizer["NG"]}")" FieldName="@nameof(Workorder.Okamount)" />
                        </Columns>
                    </DxGrid>
                </div>
            </Template>
        </DxGridLayoutItem>
    </Items>
</DxGridLayout>
<DxPopup @bind-Visible="@popupVisible" CloseOnOutsideClick="false" ShowHeader="true" ShowFooter="false" Width="50rem">
    <HeaderTemplate>
        <div class="w-100 p-3 border border-bottom">
            <DxToolbar>
                <Items>
                    <DxToolbarItem IconCssClass="oi oi-x" Click="ClosePopup" RenderStyle="ButtonRenderStyle.Danger" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                </Items>
            </DxToolbar>
        </div>
    </HeaderTemplate>
    <BodyContentTemplate Context="bodycontext">
        <EditForm Model="@selectedWorkorder" Context="EditFormContext" OnValidSubmit="UpsertWorkorder">
            <DataAnnotationsValidator />
            <DxFormLayout>
                <DxFormLayoutItem Caption="@($"{localizer["Basic Info"]}")" ColSpanLg="12">
                    <hr>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="@($"{localizer["Process"]}")" CaptionPosition="CaptionPosition.Vertical" BeginRow="true">
                    <DxComboBox Data="@processes" @bind-Value="@selectedWorkorder.ProcessId" ReadOnly="@(!canEditOrDelete)" ShowValidationIcon="true" ValueFieldName="@nameof(Process.Id)" TextFieldName="@nameof(Process.Name)" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"></DxComboBox>
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Workorder"]}")" ColSpanLg="6">
                    <DxTextBox @bind-Text="@selectedWorkorder.WorkorderNo" ReadOnly="@(!canEditOrDelete)" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Lot"]}")" ColSpanLg="6">
                    <DxTextBox @bind-Text="@selectedWorkorder.Lot" ReadOnly="@(!canEditOrDelete)" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Part No"]}")" ColSpanLg="6">
                    <DxTextBox @bind-Text="@selectedWorkorder.PartNo" ReadOnly="@(!canEditOrDelete)" />
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="@($"{localizer["Target"]}")" ColSpanLg="6">
                    <DxSpinEdit T="@(ushort)" @bind-Value="@selectedWorkorder.TargetAmount" ReadOnly="@(!canEditOrDelete)" MinValue="0" ShowValidationIcon="true" />
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="@($"{localizer["Workorder Recipe"]}")" CaptionPosition="CaptionPosition.Vertical" BeginRow="true">
                    <DxComboBox Data="@workorderRecipeConfigs" @bind-Value="@selectedWorkorder.RecipeCategoryId" ReadOnly="@(!canEditOrDelete)" ValueFieldName="@nameof(WorkorderRecipeConfig.Id)" TextFieldName="@nameof(WorkorderRecipeConfig.RecipeCategory)" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"></DxComboBox>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="@($"{localizer["Workorder Record"]}")" CaptionPosition="CaptionPosition.Vertical">
                    <DxComboBox Data="@workorderRecordConfigs" Value="@selectedWorkorder.WorkorderRecordCategoryId" ValueChanged="((Guid? id)=>WorkorderRecordSelected(id))" ValueExpression="(()=>selectedWorkorder.WorkorderRecordCategoryId)" ValueFieldName="@nameof(WorkorderRecordConfig.Id)" TextFieldName="@nameof(WorkorderRecordConfig.WorkorderRecordCategory)" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"></DxComboBox>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="@($"{localizer["Item Record"]}")" CaptionPosition="CaptionPosition.Vertical">
                    <DxComboBox Data="@itemRecordConfigs" @bind-Value="@selectedWorkorder.ItemRecordsCategoryId" ReadOnly="@(!canEditOrDelete)" ValueFieldName="@nameof(ItemRecordConfig.Id)" TextFieldName="@nameof(ItemRecordConfig.ItemRecordCategory)" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"></DxComboBox>
                </DxFormLayoutItem>
                <DxFormLayoutItem Caption="@($"{localizer["Task Record"]}")" CaptionPosition="CaptionPosition.Vertical">
                    <DxComboBox Data="@taskRecordConfigs" @bind-Value="@selectedWorkorder.TaskRecordCategoryId" ReadOnly="@(!canEditOrDelete)" ValueFieldName="@nameof(ItemRecordConfig.Id)" TextFieldName="@nameof(ItemRecordConfig.ItemRecordCategory)" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"></DxComboBox>
                </DxFormLayoutItem>
                @if (workorderRecordDetails.Any())
                {
                    <DxFormLayoutItem Caption="@($"{localizer["Workorder Record"]}")" ColSpanLg="12">
                        <hr>
                    </DxFormLayoutItem>
                    @foreach (var item in workorderRecordDetails)
                    {
                        <DxFormLayoutItem Caption="@(item.RecordContent?.RecordName)" ColSpanLg="6" CaptionPosition="CaptionPosition.Vertical">
                            <DxTextBox Text="@item.Value" TextChanged="((string s) => SetRecordDetail(item, s))" ReadOnly="@(!canEditOrDelete)" TextExpression="(()=>item.Value)"></DxTextBox>
                        </DxFormLayoutItem>
                    }
                }
                <DxFormLayoutItem ColSpanLg="12">
                    <hr>
                </DxFormLayoutItem>
                <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" ColSpanLg="12">
                    <DxToolbar>
                        <Items>
                            <DxToolbarItem IconCssClass="oi oi-check" SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" BeginGroup="true" Alignment="ToolbarItemAlignment.Right" RenderStyleMode="ToolbarItemRenderStyleMode.Contained" />
                        </Items>
                    </DxToolbar>
                </DxFormLayoutItem>
            </DxFormLayout>
        </EditForm>
    </BodyContentTemplate>
</DxPopup>
@code {
    IGrid grid { get; set; }
    private List<Workorder> workorders = new();
    Workorder? selectedWorkorder;
    private bool workorderSelected => selectedWorkorder != null;

    private bool popupVisible = false;
    private IEnumerable<Process> processes;
    private IEnumerable<WorkorderRecipeConfig> workorderRecipeConfigs;
    private IEnumerable<WorkorderRecordConfig> workorderRecordConfigs;
    private IEnumerable<ItemRecordConfig> itemRecordConfigs;
    private IEnumerable<TaskRecordConfig> taskRecordConfigs;

    private bool canEditOrDelete => authService.IsRole("SuperUser") ? true : workorderSelected && selectedWorkorder.Status == 0;

    private IEnumerable<WorkorderRecordDetail> workorderRecordDetails;

    protected override async Task OnInitializedAsync()
    {
        await GetParameter();
    }

    private async Task GetParameter()
    {
        workorders = await shopfloorService.GetAllWorkorders();
        //await RetriveWorkorderRecord();
    }

    private async Task RetriveWorkorderRecord()
    {
        workorderRecordDetails = workorderSelected ? await shopfloorService.RetriveOrGenerateWorkorderRecordContent(selectedWorkorder, selectedWorkorder.WorkorderRecordCategoryId) : new List<WorkorderRecordDetail>();
    }

    private async Task GetCandidateData()
    {
        processes = await shopfloorService.GetAllProcess();
        workorderRecipeConfigs = await shopfloorService.GetWorkorderRecipeConfigs();
        workorderRecordConfigs = await shopfloorService.GetWorkorderRecordConfigs();
        itemRecordConfigs = await shopfloorService.GetItemRecordConfigs();
        taskRecordConfigs = await shopfloorService.GetTaskRecordConfigs();
    }

    private async void ShowPopup()
    {
        await GetCandidateData();
        await RetriveWorkorderRecord();
        popupVisible = true;
    }
    private async void ClosePopup()
    {
        await GetParameter();
        popupVisible = false;
    }
    private async void OnFocusedRowChanged(GridFocusedRowChangedEventArgs e)
    {
        selectedWorkorder = e.DataItem as Workorder;
    }

    private void NavToWorkorderDetail()
    {
        nav.NavigateTo($"/Workorder/{selectedWorkorder.Id.ToString()}");
    }

    private async Task NewWorkorderClicked()
    {
        await GetCandidateData();
        selectedWorkorder = new Workorder(Guid.NewGuid());
        ShowPopup();
    }

    private async void WorkorderRecordSelected(Guid? woRecordConfigId)
    {
        selectedWorkorder.WorkorderRecordCategoryId = woRecordConfigId;
        await RetriveWorkorderRecord();
    }

    private void TargetAmountChanged(int i)
    {
        selectedWorkorder.TargetAmount = (ushort)i;
    }

    private async Task UpsertWorkorder()
    {
        var res = await shopfloorService.UpsertWorkorderConfig(selectedWorkorder);
        var res2 = await shopfloorService.UpdateWorkorderRecordDetails(selectedWorkorder.Id, workorderRecordDetails);
        ClosePopup();
        uiService.ShowToast(res);
        uiService.ShowToast(res2);
    }

    private async Task ResetWorkorder()
    {
        var res = await shopfloorService.ResetWorkorderById(selectedWorkorder.Id);
        await GetParameter();
        uiService.ShowToast(res);
    }

    private void ShowDelete()
    {
        grid.ShowDataItemDeleteConfirmation(selectedWorkorder);
    }

    private async Task DeleteWorkorder()
    {
        var res = await shopfloorService.DeleteWorkorder(selectedWorkorder);
        await GetParameter();
        uiService.ShowToast(res);
    }

    private async void SetRecordDetail(WorkorderRecordDetail workorderRecordDetail, string valStr)
    {
        workorderRecordDetail.SetValueByString(valStr);
        await InvokeAsync(StateHasChanged);
    }
}

